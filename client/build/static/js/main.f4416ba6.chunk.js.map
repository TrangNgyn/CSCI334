{"version":3,"sources":["assets/logo.svg","components/LogoMenu/LogoIcon.js","stores/UserStore.js","components/LogoMenu/LogoMenu.js","components/GrayContainer.js","assets/dots.svg","components/DotPattern.js","pages/business/BusLandingPage.js","components/QRImage.js","pages/business/checkIn/PrintableCheckIn.js","pages/business/checkIn/CheckInPage.js","pages/business/components/BusRoutes.js","pages/business/components/BusRouting.js","pages/civilian/components/Notifications.js","pages/civilian/CivLandingPage.js","pages/civilian/home/menuOptions.js","components/Option.js","pages/civilian/home/CivilianHome.js","pages/civilian/checkIn/QRScan.js","pages/civilian/checkIn/Dep.js","pages/civilian/checkIn/AddDepMenu.js","pages/civilian/checkIn/AddDependants.js","pages/civilian/checkIn/AcceptDependants.js","pages/civilian/checkIn/AddDependantsPage.js","pages/civilian/checkIn/CheckInSuccess.js","components/ToastStatusMessageWrapper.js","pages/civilian/checkIn/CheckInPage.js","pages/civilian/hotSpot/HotSpotChart.js","pages/civilian/hotSpot/HotSpotsPage.js","pages/civilian/myCerts/Certificate.js","pages/civilian/myCerts/MyCertsPage.js","pages/civilian/components/VacCentres.js","pages/civilian/components/RolloutInfo.js","pages/civilian/components/AccordButton.js","pages/civilian/rollout/RolloutsPage.js","pages/civilian/components/StatItem.js","pages/civilian/stats/TotalCasesStats.js","pages/civilian/stats/ActiveCasesStats.js","pages/civilian/stats/TotalImmunisedStats.js","pages/civilian/stats/TotalDeathsStats.js","pages/civilian/stats/TotalTestsStats.js","pages/civilian/stats/StatsPage.js","pages/healthcareProfessional/findUser/findUserPage.js","pages/healthcareProfessional/healthTools/healthTools.js","pages/healthcareProfessional/components/viruses.js","pages/healthcareProfessional/healthTools/updateVaccination.js","pages/healthcareProfessional/healthTools/addVaccination.js","pages/healthcareProfessional/healthTools/addCase.js","pages/civilian/components/civRoutes.js","pages/civilian/components/CivilianRouting.js","pages/organisation/OrgLandingPage.js","pages/organisation/home/menuOptions.js","pages/organisation/home/OrgHomePage.js","pages/organisation/addEmp/AddEmployeeManualPage.js","pages/organisation/addEmp/RemoveEmployeeManualPage.js","pages/organisation/stats/UpdateTotalEmpsMenu.js","pages/organisation/stats/StatsPage.js","pages/organisation/components/OrgRoutes.js","pages/organisation/components/OrgRouting.js","pages/admin/AdLandingPage.js","pages/admin/components/Tab.js","pages/admin/components/TabPending.js","pages/admin/org/Organizations.js","pages/admin/components/adRoutes.js","pages/admin/components/AdRouting.js","pages/AppRouting.js","components/GoogleMapsAutoComplete.js","components/InputWrapper.js","components/ButtonWrapper.js","pages/login/SignUp.js","pages/login/Login.js","App.js","theme/styles.js","theme/foundations/borders.js","theme/components/button.js","theme/typography/text.js","assets/food.jpg","theme/layerStyles/layerStyles.js","theme/theme.js","index.js"],"names":["LogoIcon","src","LogoSVG","boxSize","borderRadius","alt","hash","require","validateEmail","email","test","UserStore","id","password","accType","first_name","last_name","vaccination_certificate","alerts","access_token","expires_in","roles","token_type","newDependant","dependants","infections","isHealthCare","foundUser","vaccine_status","operationWasSuccessful","isLoggedIn","errorMSG","successMSG","isLoading","business_document_id","business_name","business_id","qr_code","address","gps","place_id","activeCasesStats","allAusData","total_vaccinations","ausData14Days","esri_data","esri_current_totals","vic_recent_confirmed_cases","vic_vaccine_locations","organisation_name","emps","orgStats","key","value","verifiedOrganisations","name","userId","pendingOrganisations","checkedIn","scanned","setProperty","addDependant","includes","push","removeDependant","filter","dep","preFetchOperations","runInAction","orgEmployeeStats","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","success","org_name","emp_ids","registered","vaccinated","message","console","log","catch","err","confirmCovidCase","updateOrganisationVerification","verified","is_verified","addEmployee","userEmail","removeEmployee","resetState","certs","businessName","orgName","employees","adminPopulateOrgList","setVerifiedOrgList","setUnverifiedOrgList","data","verified_org","unverified_org","healthCareSearchUser","civilian","healthCareGetVaccineStatus","vaccine","healthCareUpdateVaccinationStatus","vaccine_type","date","recommended_doses","doses_received","getActiveCases","confirmed_cases","getVaccineLocations","vaccine_locations","getAusData","aus_data","getAusData14Days","aus_14days","getEsriData","getRecentVicCases","getCurrentTotals","getTotalVaccinations","getBusiness","text","found","_id","doCheckIn","business","dependant","getCovidAlerts","doLogin","qr_cde","is_healthcare_worker","doLogout","doSignUp","generateQR","a","QRCode","toDataURL","qr_code_url","signUpCallbackBusiness","sha256","update","digest","role","makeAutoObservable","this","action","findUser","updateTotalEmps","LogoMenu","menuItems","notification","navigate","useNavigate","userStore","bg","border","position","p","m","_hover","bottom","cursor","shadow","map","item","onClick","path","title","GrayContainer","children","h","w","py","borderTopRadius","DotPattern","top","right","Dots","base","md","xl","HealthLandingPage","onOpen","useDisclosure","layerStyle","left","zIndex","spacing","busMenuRoutes","variant","as","align","maxW","QRImage","imageRef","useRef","useState","isLoaded","setIsLoaded","useEffect","current","complete","ref","onLoad","PrintableCheckIn","props","fontSize","React","PureComponent","CheckinPage","qrPrintRef","style","display","trigger","content","busRoutes","element","CheckInPage","BusRouting","route","Notifications","onClose","isOpen","size","overflow","el","x","rounded","boxShadow","business_address","moment","alert_date","local","format","LandingPage","civMenuRoutes","menuOptions","icon","BiCheckShield","desc","RiVirusLine","FiMapPin","BiStats","healthMenuOption","BiPlusMedical","Option","px","minHeight","pr","color","textAlign","my","CivilianHome","pb","QRScan","codeReader","BrowserMultiFormatReader","selectedDeviceId","setSelectedDeviceId","listVideoInputDevices","videoInputDevices","length","sourceSelect","document","getElementById","forEach","sourceOption","createElement","label","deviceId","appendChild","onchange","addEventListener","reset","stopContinuousDecode","decodeFromVideoDevice","result","NotFoundException","Dep","remove","FaRegSmileBeam","MdClose","observer","rightIcon","HiOutlinePlusCircle","borderColor","borderBottom","borderRight","flexDirection","onSubmit","e","preventDefault","isRequired","onChange","target","type","mt","showDeps","overflowY","maxH","justify","pt","AddDependantsPage","setShowDeps","CheckInSuccess","RiCheckboxCircleFill","toast","useToast","description","status","duration","isClosable","back","mb","placeholder","mx","MapChart","activeCases","setTooltipContent","height","colorScale","scaleLinear","domain","range","data-tip","projectionConfig","scale","rotate","center","maxZoom","geography","geoUrl","geographies","geo","POST_CODE","parseInt","properties","POA_CODE16","onMouseEnter","onMouseLeave","default","fill","outline","stroke","strokeWidth","hover","pressed","geoSuburbsUrl","centroid","geoCentroid","coordinates","pointerEvents","y","textAnchor","TR_NAME16","memo","HotSpotsPage","setContent","groupedStats","setGroupedStats","mobile","window","innerWidth","covidCases","i","undefined","postcode","Postcode","groupStats","width","effect","href","Certificate","BiAward","pl","justifyContent","alignItems","minH","Object","keys","constructor","VacCentres","location","shortNameClean","addressFull","waitPeriodDisp","RolloutInfo","rolloutPanel","MdCheckCircle","AccordButton","isExpanded","_expanded","opacity","fontWeight","Minus","Add","setRolloutPanel","defaultIndex","allowToggle","isExternal","StatItem","d","TotalCasesStats","currentTotals","Total_Cases","toLocaleString","NSW","VIC","ACT","NT","QLD","SA","TAS","total","ActiveCasesStats","temp","lhd_2010_name","notification_date","Date","toString","post_code","keyname","TotalImmunisedStats","totalVaccinations","vac","vaccinationsToday","new_vaccinations","recentVaccinations","getRecentVaccinations","TotalDeathsStats","currentDeaths","Total_Deaths","NSW_Deaths","VIC_Deaths","ACT_Deaths","QLD_Deaths","SA_Deaths","TAS_Deaths","currentVaccinations","NSW_Tests","VIC_Tests","ACT_Tests","NT_Tests","QLD_Tests","SA_Tests","TAS_Tests","StatsPage","direction","setUserEmail","viruses","vaccines","setVaccine","now","certificateDate","setCertificateDate","receivedDoses","setReceivedDoses","recommendedDoses","setRecommendedDoses","required","min","civRoutes","CivilianRouting","orgMenuRoutes","BsPersonPlus","BsPersonDash","BsPerson","OrgHomePage","empEmail","setEmpEmail","borderTop","borderLeft","totalEmps","HiUserGroup","orgRoutes","OrgRouting","adMenuRoutes","AccountTab","handleOrganisationVerification","setUpdateOrgList","organisation","setOrganisation","AccountTabPending","updateOrgList","setVerifiedOrganisations","searchVerifiedOrganisations","setSearchVerifiedOrganisations","unverifiedOrganisations","setUnverifiedOrganisations","searchUnverifiedOrganisations","setSearchUnverifiedOrganisations","results","handleUserSearch","colorScheme","mr","adRoutes","Organizations","LocationSearchInput","onSelect","geocodeByAddress","getLatLng","latLng","error","getInputProps","suggestions","getSuggestionItemProps","loading","className","suggestion","active","backgroundColor","disabled","accTypes","setSignUp","signUp","styles","global","borders","baseStyle","sizes","variants","defaultProps","Button","textTransform","green","gray","orange","red","Text","fontFamily","heading","link","textDecoration","layerStyles","mainBG","bgGradient","grayBG","function","foodBG","backgroundImage","foodImage","backgroundPosition","backgroundRepeat","backgroundSize","accordButton","paddingTop","paddingBottom","marginBottom","statItem","overrides","components","extendTheme","ReactDOM","render","StrictMode","theme"],"mappings":"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","file":"static/js/main.f4416ba6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b53e6b17.svg\";","import { Image } from \"@chakra-ui/image\";\r\nimport React from \"react\";\r\nimport LogoSVG from \"../../assets/logo.svg\";\r\n\r\nexport default function LogoIcon() {\r\n  return (\r\n    <Image\r\n      src={LogoSVG}\r\n      boxSize=\"90\"\r\n      borderRadius=\"full\"\r\n      alt=\"Trace Response Logo\"\r\n    />\r\n  );\r\n}\r\n","import { action, makeAutoObservable, runInAction } from \"mobx\";\r\nimport QRCode from \"qrcode\";\r\n\r\nconst hash = require(\"hash.js\");\r\n\r\nclass UserStoreImpl {\r\n  id = \"\";\r\n  email = \"Robert-Desean@gmail.com\";\r\n  password = \"jordan\";\r\n  accType = \"civilian\";\r\n  first_name = \"\";\r\n  last_name = \"\";\r\n  vaccination_certificate = {};\r\n  alerts = [];\r\n\r\n  // token variables recieved after succesful login\r\n  access_token = \"\";\r\n  expires_in = \"\";\r\n  roles = [];\r\n  token_type = \"\";\r\n\r\n  newDependant = \"\";\r\n  dependants = [];\r\n  infections = [\"covid\"];\r\n\r\n  // Healthcare worker user type\r\n  isHealthCare = false;\r\n  foundUser = { first_name: \"\", last_name: \"\", email: \"\", vaccine_status: {} };\r\n  operationWasSuccessful = false;\r\n\r\n  // Response from sign in/sign up\r\n  isLoggedIn = false;\r\n  errorMSG = \"\";\r\n  successMSG = \"\";\r\n  isLoading = false;\r\n\r\n  // Business Account\r\n  business_document_id = \"\";\r\n  business_name = \"\";\r\n  business_id = \"\";\r\n  qr_code = \"\";\r\n  address = \"\";\r\n  gps = {};\r\n  place_id = \"\";\r\n\r\n  // active cases by timestamp, postcode and area e.g. Sydney, Northern Sydney, Wollongong etc.\r\n  activeCasesStats = [];\r\n  allAusData = []; // numerous australia-wide covid-19 related statistics\r\n  total_vaccinations = [];\r\n  ausData14Days = []; // all of Australia data over the last 14 days\r\n  esri_data = [];\r\n  esri_current_totals = [];\r\n  vic_recent_confirmed_cases = [];\r\n  vic_vaccine_locations = [];\r\n\r\n  // Organisation Account\r\n  organisation_name = \"\";\r\n  emps = []; // ID's of employees\r\n  orgStats = [\r\n    { key: \"Acc's Registered\", value: 0 },\r\n    { key: \"Vaccinated\", value: 0 },\r\n  ];\r\n\r\n  // Admin Account\r\n  verifiedOrganisations = [\r\n    {\r\n      name: \"UoW\",\r\n      userId: \"123141\",\r\n    },\r\n    {\r\n      name: \"UNSW\",\r\n      userId: \"121323\",\r\n    },\r\n    {\r\n      name: \"UTS\",\r\n      userId: \"121231\",\r\n    },\r\n  ];\r\n  pendingOrganisations = [\r\n    {\r\n      name: \"UCal\",\r\n      userId: \"233214\",\r\n    },\r\n    {\r\n      name: \"USyd\",\r\n      userId: \"234324\",\r\n    },\r\n    {\r\n      name: \"UCLA\",\r\n      userId: \"253212\",\r\n    },\r\n  ];\r\n\r\n  // Check in Form\r\n  checkedIn = false;\r\n  scanned = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this, {\r\n      setProperty: action,\r\n      resetState: action,\r\n      addDependant: action,\r\n      removeDependant: action,\r\n      findUser: action,\r\n      getBusiness: action,\r\n      updateTotalEmps: action,\r\n    });\r\n  }\r\n\r\n  setProperty = (key, value) => {\r\n    this[key] = value;\r\n  };\r\n\r\n  addDependant = () => {\r\n    if (this.newDependant !== \"\") {\r\n      if (!this.dependants.includes(this.newDependant)) {\r\n        this.dependants.push(this.newDependant);\r\n        this.newDependant = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  removeDependant = (name) => {\r\n    this.dependants = this.dependants.filter((dep) => dep !== name.name);\r\n  };\r\n\r\n  // operations to be run before fetch requests\r\n  preFetchOperations = () => {\r\n    runInAction(() => {\r\n      this.operationWasSuccessful = false;\r\n      this.errorMSG = \"\";\r\n      this.successMSG = \"\";\r\n      this.isLoading = true;\r\n    });\r\n  }\r\n\r\n  // fetch org's employee stats\r\n  orgEmployeeStats = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/organisation/get-org-employees\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({}),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.organisation_name = json.org_name;\r\n            this.emps = json.emp_ids;\r\n            this.orgStats = [\r\n              { key: \"Accounts Registered\", value: json.registered },\r\n              { key: \"Vaccinated\", value: json.vaccinated },\r\n            ];\r\n\r\n            this.errorMSG = \"\";\r\n            this.successMSG = json.message;\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n\r\n            console.log(this.orgStats)\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // healthcare worker confirm positive case of covid in a civilian\r\n  confirmCovidCase = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/civ-create-alerts\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: this.foundUser.email,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        console.log(json);\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG = json.message;\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // admin account approve and revoke organisation account status\r\n  updateOrganisationVerification = (email, verified) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/organisation/update-org-status\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${this.access_token}`\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        is_verified: verified,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        console.log(json);\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG = json.message;\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.successMSG = \"\";\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  addEmployee = (userEmail) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/promote-civilian\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: userEmail,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG =\r\n              \"Succesfully added user to Organisation and granted Healthcare Worker privileges!\";\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.successMSG = \"\";\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  removeEmployee = (userEmail) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/demote-healthcare\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: userEmail,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG =\r\n              \"Succesfully removed employee from your Organisation and revoked their Healthcare Worker privileges!\";\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.successMSG = \"\";\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  resetState = () => {\r\n    this.id = \"\";\r\n    this.email = \"\";\r\n    this.password = \"\";\r\n    this.accType = \"civilian\";\r\n    this.isLoggedIn = false;\r\n    this.first_name = \"\";\r\n    this.last_name = \"\";\r\n    this.certs = [];\r\n    this.infections = [\"covid\", \"tetanus\"];\r\n    this.alerts = [];\r\n    this.isHealthCare = false;\r\n    this.errorMSG = \"\";\r\n    this.businessName = \"\";\r\n    //this.QRCodeUrl = \"\";\r\n    this.orgName = \"\";\r\n    this.employees = [];\r\n  };\r\n\r\n  adminPopulateOrgList = (setVerifiedOrgList, setUnverifiedOrgList) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/organisation/get-org-by-status\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      // body: JSON.stringify({\r\n      //   is_verified: userEmail,\r\n      // }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            setVerifiedOrgList(json.data.verified_org);\r\n            setUnverifiedOrgList(json.data.unverified_org);\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  healthCareSearchUser = (userEmail) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/healthcare-search-user\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: userEmail,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.foundUser = json.civilian;\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.operationWasSuccessful = false;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.operationWasSuccessful = false;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  healthCareGetVaccineStatus = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/retrieve-vaccination-status\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: this.foundUser.email,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.foundUser.vaccine_status = json.data.vaccine;\r\n            console.log(json.data.vaccine);\r\n            console.log(this.foundUser.vaccine_status);\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // as a healthcare worker, update a vaccination status of a civilian\r\n  healthCareUpdateVaccinationStatus = (\r\n    vaccine_type,\r\n    date,\r\n    recommended_doses,\r\n    doses_received\r\n  ) => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/update-vaccination-status\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        email: this.foundUser.email,\r\n        vaccine_type,\r\n        date,\r\n        recommended_doses,\r\n        doses_received,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG = \"Succesfully updated users' vaccination status!\";\r\n            this.operationWasSuccessful = true;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.successMSG = \"\";\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getActiveCases = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/confirmed-cases-14days\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.activeCasesStats = json.confirmed_cases;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // get vaccine locations for Victoria (only state to release a dataset with vaccine locations)\r\n  getVaccineLocations = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-vic-vaccine-locations\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.vic_vaccine_locations = json.vaccine_locations;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getAusData = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-aus-data\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.allAusData = json.aus_data;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getAusData14Days = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-aus-confirmed-cases-14days\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.ausData14Days = json.aus_14days;\r\n            console.log(json.aus_14days);\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getEsriData = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-esri-data\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.esri_data = json.esri_data;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getRecentVicCases = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-vic-confirmed-cases-14days\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.vic_recent_confirmed_cases = json.confirmed_cases;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getCurrentTotals = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-current-totals-data\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.esri_current_totals = json.esri_data;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  getTotalVaccinations = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/stats/get-aus-total-vaccinations\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.total_vaccinations = json.total_vaccinations;\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // get business by id for check in\r\n  getBusiness = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/business/get_business\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        business_id: this.business_id.text,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.successMSG = \"Sucessfully scanned business QR code!\";\r\n            this.business_document_id = json.found._id; // get mongoDB object id of document\r\n            this.business_name = json.found.business_name; // get name of business\r\n            this.address = json.found.address; // get human-readable address of business\r\n            this.gps = json.found.gps; // get coordinates of business\r\n            this.isLoading = false;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.successMSG = \"\";\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  doCheckIn = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/check-in/create-check-in\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        business: this.business_document_id,\r\n        dependant: this.dependants,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (json.success) {\r\n            this.errorMSG = \"\";\r\n            this.isLoading = false;\r\n            this.checkedIn = true;\r\n          } else {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.successMSG = \"\";\r\n          this.isLoading = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  // get alerts for a user account on login\r\n  getCovidAlerts = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/civilian/alerts\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.access_token}`,\r\n      }\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (!json.success) {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n            this.isLoggedIn = false;\r\n          } else { \r\n            this.alerts = [];\r\n            this.errorMSG = \"\";\r\n            this.alerts = json.found.alerts;\r\n            this.isLoading = false;\r\n            this.isLoggedIn = true;\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n          this.isLoggedIn = false;\r\n        });\r\n      });\r\n  };\r\n\r\n  doLogin = () => {\r\n    this.preFetchOperations();\r\n    fetch(\"/api/auth/sign_in\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: this.email,\r\n        password: this.password,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        runInAction(() => {\r\n          if (!json.success) {\r\n            this.errorMSG = json.message;\r\n            this.isLoading = false;\r\n            this.isLoggedIn = false;\r\n\r\n          } else {\r\n            // set error/success message\r\n            this.errorMSG = \"\";\r\n            this.successMSG = \"Successfully signed in\";\r\n            \r\n            this.access_token = json.access_token; // store authentication/access token for allowing to stay signed in for a certain amount of time\r\n            this.expires_in = json.expires_in; // store time in seconds before token expires\r\n            this.roles = json.roles; // get a users roles, e.g. civilian, business etc.\r\n            this.token_type = json.token_type;\r\n            this.vaccination_certificate = json.vaccination_certificate;\r\n            this.alerts = json.alerts;\r\n            this.accType = json.accType;\r\n\r\n            this.business_name = json.business_name;\r\n            this.address = json.address;\r\n            this.qr_code = json.qr_cde;\r\n\r\n            this.isHealthCare = json.is_healthcare_worker;\r\n            this.isLoading = false;\r\n            this.isLoggedIn = true;\r\n        \r\n            // retrieve notifications if user is civilian or healthcare\r\n            if(this.accType === \"civilian\" || this.accType === \"healthcare\"){\r\n              this.getCovidAlerts();\r\n            }\r\n              \r\n          }\r\n          \r\n        });\r\n      })\r\n      .catch((err) => {\r\n        runInAction(() => {\r\n          this.errorMSG = err;\r\n          this.isLoading = false;\r\n          this.isLoggedIn = false;       \r\n        });\r\n      });\r\n  };\r\n\r\n  doLogout = () => {\r\n    runInAction(() => {\r\n      this.isLoggedIn = false;\r\n      this.resetState();\r\n    });\r\n  };\r\n\r\n  doSignUp = () => {\r\n    this.preFetchOperations();\r\n    if (!validateEmail(this.email)) {\r\n      this.errorMSG = \"Email format is incorrect\";\r\n      this.isLoading = false;\r\n      return;\r\n    }\r\n\r\n    const generateQR = async (business_id) => {\r\n      try {\r\n        const qr_code_url = await QRCode.toDataURL(business_id);\r\n        signUpCallbackBusiness(qr_code_url, business_id);\r\n      } catch (err) {\r\n        runInAction(() => {\r\n          this.successMSG = \"\";\r\n          this.errorMSG = err;\r\n        });\r\n      }\r\n    };\r\n\r\n    // method used for user sign up\r\n    const signUp = () => {\r\n      fetch(\"/api/auth/sign_up\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          role: this.accType,\r\n          email: this.email,\r\n          password: this.password,\r\n          first_name: this.first_name,\r\n          last_name: this.last_name,\r\n          organisation_name: this.organisation_name,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          runInAction(() => {\r\n            if (json.success) {\r\n              this.errorMSG = \"\";\r\n              this.successMSG = \"Succesfully registered account!\";\r\n              this.isLoading = false;\r\n              this.resetState();\r\n            } else {\r\n              this.errorMSG = json.message;\r\n              this.successMSG = \"\";\r\n              this.isLoading = false;\r\n            }\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          runInAction(() => {\r\n            this.errorMSG = err;\r\n            this.successMSG = \"\";\r\n            this.isLoading = false;\r\n          });\r\n        });\r\n    };\r\n\r\n    // if signing up for a business account generate qr code then run business sign up method, else run user sign up method\r\n    if (this.accType === \"business\") {\r\n      const businessID = hash.sha256().update(this.email).digest(\"hex\"); // email is hashed to provide a unique identifier for a qr code without revealing a business' email\r\n      generateQR(businessID);\r\n    } else {\r\n      signUp();\r\n    }\r\n\r\n    // method used for user business sign up\r\n    const signUpCallbackBusiness = (qr_code_url, business_id) => {\r\n      fetch(\"/api/auth/sign_up\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          role: this.accType,\r\n          email: this.email,\r\n          password: this.password,\r\n          business_name: this.business_name,\r\n          business_id: business_id,\r\n          qr_code: qr_code_url,\r\n          address: this.address,\r\n          gps: this.gps,\r\n          place_id: this.place_id,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          runInAction(() => {\r\n            if (json.success) {\r\n              this.resetState();\r\n              this.errorMSG = \"\";\r\n              this.successMSG = \"Succesfully registered Business account!\";\r\n              this.isLoading = false;\r\n            } else {\r\n              this.errorMSG = json.message;\r\n              this.successMSG = \"\";\r\n              this.isLoading = false;\r\n            }\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          runInAction(() => {\r\n            this.errorMSG = err;\r\n            this.successMSG = \"\";\r\n            this.isLoading = false;\r\n          });\r\n        });\r\n    };\r\n  };\r\n}\r\n\r\n// Utility\r\nconst validateEmail = (email) => {\r\n  let re = /\\S+@\\S/;\r\n  return re.test(email);\r\n};\r\n\r\nexport const UserStore = new UserStoreImpl();\r\n","import React from \"react\";\r\nimport { Menu, MenuButton, MenuList, MenuItem } from \"@chakra-ui/react\";\r\nimport LogoIcon from \"./LogoIcon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserStore } from \"../../stores/UserStore\";\r\n\r\nexport default function LogoMenu({ menuItems, notification }) {\r\n  let navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  const handleLogout = () => {\r\n    userStore.doLogout();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleNotificationClicked = () => {\r\n    notification();\r\n  };\r\n\r\n  return (\r\n    <Menu>\r\n      <MenuButton\r\n        bg=\"inherit\"\r\n        border=\"none\"\r\n        position=\"relative\"\r\n        borderRadius=\"full\"\r\n        p=\"0\"\r\n        m=\"0\"\r\n        _hover={{ bottom: \"3px\", cursor: \"pointer\" }}\r\n      >\r\n        <LogoIcon />\r\n      </MenuButton>\r\n      <MenuList bg=\"white\" shadow=\"lg\">\r\n        {menuItems.map((item) => (\r\n          <MenuItem\r\n            bg=\"white\"\r\n            border=\"none\"\r\n            key={item.title}\r\n            onClick={() => navigate(item.path)}\r\n          >\r\n            {item.title}\r\n          </MenuItem>\r\n        ))}\r\n        {(userStore.accType == \"civilian\" || userStore.accType == \"healthcare\") && (\r\n          <MenuItem\r\n            bg=\"white\"\r\n            border=\"none\"\r\n            key={\"notification\"}\r\n            onClick={handleNotificationClicked}\r\n          >\r\n            Notification\r\n          </MenuItem>\r\n        )}\r\n\r\n        <MenuItem\r\n          bg=\"white\"\r\n          border=\"none\"\r\n          key={\"logout\"}\r\n          onClick={handleLogout}\r\n        >\r\n          Logout\r\n        </MenuItem>\r\n      </MenuList>\r\n    </Menu>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { VStack, Spacer, Center } from \"@chakra-ui/layout\";\r\n\r\nexport default function GrayContainer({ children }) {\r\n  return (\r\n    <VStack h=\"100%\">\r\n      <Spacer />\r\n      <Center w=\"100%\" bg=\"#EFEFEF\" py=\"14\" borderTopRadius=\"40\" position=\"fixed\" bottom=\"0\">\r\n        {children}\r\n      </Center>\r\n    </VStack>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dots.d11f1acd.svg\";","import { Image } from \"@chakra-ui/image\";\r\nimport React from \"react\";\r\nimport Dots from \"../assets/dots.svg\";\r\n\r\nexport default function DotPattern() {\r\n  return (\r\n    <Image\r\n      position=\"absolute\"\r\n      top=\"0\"\r\n      right=\"0\"\r\n      src={Dots}\r\n      h={{ base: \"160\", md: \"240\", xl: \"400\" }}\r\n      alt=\"White Doots\"\r\n    />\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport LogoMenu from \"../../components/LogoMenu/LogoMenu\";\r\nimport { busMenuRoutes } from \"./components/BusRoutes\";\r\nimport GrayContainer from \"../../components/GrayContainer\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\n\r\nexport default function HealthLandingPage() {\r\n  const navigate = useNavigate();\r\n  const { onOpen } = useDisclosure();\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <Box position=\"absolute\" top=\"5\" left=\"5\" zIndex=\"2\"></Box>\r\n      <DotPattern />\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <LogoMenu\r\n            menuItems={busMenuRoutes}\r\n            notification={handleNotificationClicked}\r\n          />\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            Business Account\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Track the spread. Lower the risk. Beat the plague.\r\n          </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"green\" onClick={() => navigate(\"/bus/checkin\")}>\r\n              My QR Code\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Image, Center, Spinner } from \"@chakra-ui/react\";\r\n\r\nexport default function QRImage({ src }) {\r\n  const imageRef = useRef(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded && imageRef.current?.complete) {\r\n      setIsLoaded(true);\r\n    }\r\n  }, []);\r\n\r\n  if (!isLoaded) {\r\n    <Center minH=\"300px\">\r\n      <Spinner />\r\n    </Center>;\r\n  }\r\n  return (\r\n    <Image\r\n      ref={imageRef}\r\n      src={src}\r\n      alt=\"The QR code of the organisation\"\r\n      w=\"90%\"\r\n      maxW=\"400px\"\r\n      onLoad={() => {\r\n        setIsLoaded(true);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Center, VStack, Text } from \"@chakra-ui/react\";\r\nimport QRImage from \"../../../components/QRImage\";\r\n\r\n// react-to-print must be class based components\r\nexport class PrintableCheckIn extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Center h=\"100vh\" w=\"100vw\" id=\"Printable-QR-Code-Page\">\r\n        <VStack spacing=\"7\" w=\"100%\" p=\"16\">\r\n          <Text variant=\"heading\" fontSize=\"5xl\" m={0}>\r\n            {this.props.business_name}\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Check in to our premises\r\n          </Text>\r\n\r\n          <Center w=\"50%\" h=\"100%\">\r\n            <QRImage src={this.props.qr_code} />\r\n          </Center>\r\n\r\n          <Text variant=\"heading\">Stay Covid Safe</Text>\r\n          <Text>Check out the Trace Response app to beat plague!</Text>\r\n        </VStack>\r\n      </Center>\r\n    );\r\n  }\r\n}\r\n","import { VStack, Text, Box, Button } from \"@chakra-ui/react\";\r\nimport React, { useRef } from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport QRImage from \"../../../components/QRImage\";\r\nimport ReactToPrint from \"react-to-print\";\r\nimport { PrintableCheckIn } from \"./PrintableCheckIn\";\r\n\r\nconst CheckinPage = () => {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n  const qrPrintRef = useRef();\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      {/* render printable page and pass props, not displayed, just for printing */}\r\n\r\n      <div style={{display:'none'}}>\r\n        <Box ref={qrPrintRef}>\r\n          <PrintableCheckIn\r\n            ref={qrPrintRef}\r\n            business_name={userStore.business_name}\r\n            qr_code={userStore.qr_code}\r\n          />\r\n        </Box>\r\n      </div>\r\n\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <Text variant=\"heading\" as=\"h2\" m={0}>\r\n            {userStore.business_name}\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Check in to our premises\r\n          </Text>\r\n          <QRImage src={userStore.qr_code} />\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <ReactToPrint\r\n              trigger={() => <Button variant=\"green\">Print this page!</Button>}\r\n              content={() => qrPrintRef.current}\r\n            />\r\n            <Button variant=\"gray\" onClick={() => navigate(\"/\")}>\r\n              BACK\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CheckinPage;\r\n","import BusLandingPage from \"../BusLandingPage\";\r\nimport CheckInPage from \"../checkIn/CheckInPage\";\r\n\r\nexport const busRoutes = [\r\n  {\r\n    path: \"/\",\r\n    element: <BusLandingPage />,\r\n  },\r\n  {\r\n    path: \"/bus/checkin\",\r\n    element: <CheckInPage />,\r\n  },\r\n];\r\n\r\nexport const busMenuRoutes = [\r\n  {\r\n    title: \"Check in\",\r\n    path: \"/bus/checkin\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { busRoutes } from \"../components/BusRoutes\";\r\n\r\nexport default function BusRouting() {\r\n  return (\r\n    <Routes>\r\n      {busRoutes.map((route) => (\r\n        <Route key={route.path} path={route.path} element={route.element} />\r\n      ))}\r\n    </Routes>\r\n  );\r\n}\r\n","import {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  Text,\r\n  VStack,\r\n  Button,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\n\r\nconst Notifications = ({ onClose, isOpen, alerts }) => {\r\n\r\n  return (\r\n    <Drawer onClose={onClose} isOpen={isOpen} size={\"lg\"} zIndex=\"0\">\r\n      <DrawerOverlay />\r\n      <DrawerContent bg=\"#EFEFEF\" overflow=\"scroll\">\r\n        <DrawerHeader>Notifications</DrawerHeader>\r\n        <DrawerBody>\r\n          <VStack spacing={4} align=\"left\">\r\n            {alerts.map((el, x) => (\r\n              <Box bg=\"white\" key={x} w=\"90%\" rounded=\"lg\" p=\"4\" boxShadow=\"lg\">\r\n                <VStack align=\"left\">\r\n                  <Text as=\"h3\" m={0}>\r\n                    Possible COVID-19 Contact Alert\r\n                  </Text>\r\n                  <Text>Business Name: {el.business_name}</Text>\r\n                  <Text>Location: {el.business_address}</Text>\r\n                  <Text>Date: {moment(el.alert_date).local().format(\"YYYY-MM-DD\")}</Text>\r\n                </VStack>\r\n              </Box>\r\n            ))}\r\n          </VStack>\r\n        </DrawerBody>\r\n        <DrawerFooter>\r\n          <VStack w=\"100%\" spacing={4}>\r\n            <Button variant=\"gray\" onClick={onClose}>\r\n              Back\r\n            </Button>\r\n          </VStack>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport LogoMenu from \"../../components/LogoMenu/LogoMenu\";\r\nimport { civMenuRoutes } from \"./components/civRoutes\";\r\nimport GrayContainer from \"../../components/GrayContainer\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Notifications from \"./components/Notifications\";\r\nimport { UserStore } from \"../../stores/UserStore\";\r\nimport {\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function LandingPage() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const alerts = userStore.alerts;\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <DotPattern />\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <LogoMenu menuItems={civMenuRoutes} notification={handleNotificationClicked}/>\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            User Account\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Track the spread. Lower the risk. Beat the plague.\r\n          </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"gray\" onClick={() => navigate(\"/civ/home\")}>\r\n              Home\r\n            </Button>\r\n            <Button variant=\"green\" onClick={() => navigate(\"/civ/checkin\")}>\r\n              Check In\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n      <Notifications onClose={onClose} isOpen={isOpen} alerts={alerts}></Notifications>\r\n    </Box>\r\n  );\r\n}\r\n","import { BiCheckShield } from \"react-icons/bi\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\nimport { FiMapPin } from \"react-icons/fi\";\r\nimport { BiStats } from \"react-icons/bi\";\r\nimport { BiPlusMedical } from \"react-icons/bi\";\r\n\r\nexport const menuOptions = [\r\n  {\r\n    icon: BiCheckShield,\r\n    title: \"My Certificates\",\r\n    desc: \"View your vaccine certifications\",\r\n    route: \"/civ/certs\",\r\n  },\r\n  {\r\n    icon: RiVirusLine,\r\n    title: \"Hotspot Map\",\r\n    desc: \"Display any active cases near you\",\r\n    route: \"/civ/hotspot\",\r\n  },\r\n  {\r\n    icon: FiMapPin,\r\n    title: \"Rollout Information\",\r\n    desc: \"Vaccine rollouts in you area\",\r\n    route: \"/civ/rollout\",\r\n  },\r\n  {\r\n    icon: BiStats,\r\n    title: \"Statistics\",\r\n    desc: \"View viral statistics for your locality\",\r\n    route: \"/civ/stats\",\r\n  },\r\n];\r\n\r\nexport const healthMenuOption = {\r\n  icon: BiPlusMedical,\r\n  title: \"Health Tools\",\r\n  desc: \"Identify and track infections\",\r\n  route: \"/hea/finduser\",\r\n};\r\n","import Icon from \"@chakra-ui/icon\";\r\nimport { Box, HStack, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nexport default function Option({ content }) {\r\n  let { icon, title, desc, route } = content;\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Box\r\n      bg=\"white\"\r\n      py=\"2\"\r\n      px=\"4\"\r\n      borderRadius=\"xl\"\r\n      shadow=\"base\"\r\n      w=\"90%\"\r\n      minHeight=\"60px\"\r\n      onClick={() => navigate(route)}\r\n      _hover={{ bg: \"gray.200\", cursor: \"pointer\" }}\r\n    >\r\n      <HStack>\r\n        <Icon\r\n          as={icon}\r\n          boxSize={{ base: \"12%\", md: \"8%\" }}\r\n          pr=\"2\"\r\n          color=\"gray.700\"\r\n        />\r\n        <VStack>\r\n          <Text as=\"h3\" color=\"gray.700\" textAlign=\"start\" my=\"1\" w=\"100%\">\r\n            {title}\r\n          </Text>\r\n          <Text textAlign=\"start\">{desc}</Text>\r\n        </VStack>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Center, VStack } from \"@chakra-ui/layout\";\r\nimport React, { useEffect } from \"react\";\r\nimport LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\nimport { civMenuRoutes } from \"../components/civRoutes\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { menuOptions, healthMenuOption } from \"./menuOptions\";\r\nimport Option from \"../../../components/Option\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport Notifications from \"../components/Notifications\";\r\n\r\nexport default function CivilianHome() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const alerts = userStore.alerts;\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n\r\n  // fetch statistics from the DBMS afer succesful login\r\n  useEffect(() => {\r\n    userStore.getActiveCases();\r\n    userStore.getAusData();\r\n    userStore.getTotalVaccinations();\r\n    userStore.getAusData14Days();\r\n    userStore.getEsriData();\r\n    userStore.getCurrentTotals();\r\n    userStore.getRecentVicCases();\r\n  }, []);\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\" position=\"relative\" overflow=\"scroll\">\r\n      <Box position=\"fixed\" zIndex=\"1\" top=\"5\" left=\"5\">\r\n        <LogoMenu\r\n          menuItems={civMenuRoutes}\r\n          notification={handleNotificationClicked}\r\n        />\r\n      </Box>\r\n      <Box position=\"absolute\" w=\"100%\" top=\"140px\" zIndex=\"0\" pb=\"180px\">\r\n        <Center>\r\n          <VStack\r\n            spacing=\"2\"\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          >\r\n            {menuOptions.map((item) => (\r\n              <Option key={item.title} content={item} />\r\n            ))}\r\n            {userStore.isHealthCare && <Option content={healthMenuOption} />}\r\n          </VStack>\r\n        </Center>\r\n      </Box>\r\n      <GrayContainer>\r\n        <VStack\r\n          spacing=\"7\"\r\n          w=\"90%\"\r\n          maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          zIndex=\"2\"\r\n        >\r\n          <Button variant=\"green\" onClick={() => navigate(\"/civ/checkin\")}>\r\n            Check In\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n      <Notifications\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        alerts={alerts}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserMultiFormatReader, NotFoundException } from \"@zxing/library\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\n\r\nexport default function QRScan() {\r\n  const codeReader = new BrowserMultiFormatReader();\r\n  const [selectedDeviceId, setSelectedDeviceId] = useState(\"\");\r\n  const userStore = UserStore;\r\n\r\n  // get the users available video sources on component mount and display them in the dropdown menu\r\n  useEffect(() => {\r\n    codeReader\r\n      .listVideoInputDevices()\r\n      .then((videoInputDevices) => {\r\n        if (videoInputDevices.length > 0) {\r\n          const sourceSelect = document.getElementById(\"sourceSelect\");\r\n          if (videoInputDevices.length >= 1) {\r\n            videoInputDevices.forEach((element) => {\r\n              const sourceOption = document.createElement(\"option\");\r\n              sourceOption.text = element.label;\r\n              sourceOption.value = element.deviceId;\r\n              sourceSelect.appendChild(sourceOption);\r\n            });\r\n\r\n            sourceSelect.onchange = () => {\r\n              setSelectedDeviceId(sourceSelect.value);\r\n            };\r\n\r\n            const sourceSelectPanel =\r\n              document.getElementById(\"sourceSelectPanel\");\r\n            sourceSelectPanel.style.display = \"block\";\r\n          }\r\n            document.getElementById(\"back\").addEventListener(\"click\", () => {\r\n              codeReader.reset();\r\n              codeReader.stopContinuousDecode();\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          userStore.setProperty(\"errorMSG\", err);\r\n        });\r\n        userStore.setProperty(\"errorMSG\", \"\")\r\n      }, []);\r\n\r\n      // when selected device is initially selected/updated show the video source for scanning the QR code\r\n      useEffect(() => {\r\n        if(selectedDeviceId.length > 0) {\r\n          codeReader.decodeFromVideoDevice(\r\n            selectedDeviceId,\r\n            \"video\",\r\n            (result, err) => {\r\n              if (result) {\r\n                userStore.setProperty(\"business_id\", result);\r\n                userStore.setProperty(\"scanned\", true);\r\n                console.log(result);\r\n                codeReader.reset();\r\n                codeReader.stopContinuousDecode();\r\n              }\r\n              if (err && !(err instanceof NotFoundException)) {\r\n                userStore.setProperty(\"errorMSG\", err);\r\n              }\r\n            }\r\n          );\r\n        }\r\n        codeReader.stopContinuousDecode();\r\n      }, [selectedDeviceId]);\r\n\r\n  return (\r\n    <Box h=\"50vh\">\r\n      <video id=\"video\" />\r\n    </Box>\r\n  );\r\n}\r\n","import Icon from \"@chakra-ui/icon\";\r\nimport { Center, Spacer, Text } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport { FaRegSmileBeam } from \"react-icons/fa\";\r\n\r\nexport default function Dep({ name, remove }) {\r\n  return (\r\n    <Center w=\"90%\" borderRadius=\"full\" bg=\"white\" px=\"6\" py=\"1\">\r\n      <Icon as={FaRegSmileBeam} boxSize={6} color=\"gray.700\" pr=\"3\" />\r\n      <Text>{name}</Text>\r\n      <Spacer />\r\n      <Icon as={MdClose} boxSize={5} onClick={() => remove({ name })} />\r\n    </Center>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Input, Portal, Center } from \"@chakra-ui/react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport Icon from \"@chakra-ui/icon\";\r\nimport { HiOutlinePlusCircle } from \"react-icons/hi\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction AddDepMenu() {\r\n  const userStore = UserStore;\r\n\r\n  const addDep = (e) => {\r\n    e.preventDefault();\r\n    userStore.addDependant();\r\n  };\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button\r\n          w=\"34\"\r\n          variant=\"gray\"\r\n          rightIcon={<Icon as={HiOutlinePlusCircle} boxSize=\"6\" />}\r\n        >\r\n          Add\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <Portal>\r\n        <PopoverContent\r\n          w=\"90%\"\r\n          shadow=\"lg\"\r\n          border=\"2px\"\r\n          borderColor=\"green.500\"\r\n        >\r\n          <PopoverArrow\r\n            borderBottom=\"2px\"\r\n            borderRight=\"2px\"\r\n            borderColor=\"green.500\"\r\n          />\r\n          <PopoverHeader>Dependant Name</PopoverHeader>\r\n          <PopoverCloseButton bg=\"none\" border=\"none\" boxSize=\"8\" />\r\n          <PopoverBody w=\"240px\">\r\n            <Center flexDirection=\"column\" p=\"3\">\r\n              <form onSubmit={addDep}>\r\n                <Input\r\n                  isRequired\r\n                  w=\"160px\"\r\n                  name=\"newDependant\"\r\n                  value={userStore.newDependant}\r\n                  onChange={(e) =>\r\n                    userStore.setProperty(e.target.name, e.target.value)\r\n                  }\r\n                />\r\n                <Button type=\"submit\" w=\"196px\" variant=\"green\" mt=\"4\">\r\n                  Add\r\n                </Button>\r\n              </form>\r\n            </Center>\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default observer(AddDepMenu);\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Flex, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport Dep from \"./Dep\";\r\nimport AddDepMenu from \"./AddDepMenu\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction AddDependants({ showDeps }) {\r\n  const userStore = UserStore;\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"foodBG\">\r\n      <GrayContainer>\r\n        <VStack spacing=\"0\">\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            Add Dependants\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\" pb=\"8\">\r\n            Add anyone who is unable to add themselves\r\n          </Text>\r\n          <Box\r\n            overflowY=\"scroll\"\r\n            w=\"100%\"\r\n            maxH=\"300px\"\r\n            p=\"5\"\r\n            borderRadius=\"3xl\"\r\n          >\r\n            <VStack spacing=\"3\">\r\n              {userStore.dependants.map((dep) => (\r\n                <Dep key={dep} name={dep} remove={userStore.removeDependant} />\r\n              ))}\r\n            </VStack>\r\n          </Box>\r\n          <Flex justify=\"flex-end\" w=\"100%\" pt=\"3\" pb=\"8\">\r\n            <AddDepMenu />\r\n          </Flex>\r\n\r\n          <Button variant=\"green\" onClick={() => showDeps(false)}>\r\n            Accept\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default observer(AddDependants);\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React, { useEffect } from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction AcceptDependants({ setProperty, showDeps }) {\r\n  const userStore = UserStore;\r\n\r\n  useEffect(() => {\r\n    userStore.getBusiness();\r\n  }, []);\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"foodBG\">\r\n      <GrayContainer>\r\n        <VStack spacing=\"3\" w=\"100%\">\r\n            <Text variant=\"heading\" as=\"h2\">\r\n              {userStore.business_name}\r\n            </Text>\r\n            <Text fontSize=\"2xl\">\r\n              {userStore.address}\r\n            </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"gray\" onClick={() => showDeps(true)}>\r\n              Add Dependants\r\n            </Button>\r\n            <Button\r\n              variant=\"green\"\r\n              onClick={() => userStore.doCheckIn()}\r\n            >\r\n              Check In\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default observer(AcceptDependants);\r\n","import React, { useState } from \"react\";\r\nimport AddDependants from \"./AddDependants\";\r\nimport AcceptDependants from \"./AcceptDependants\";\r\n\r\nexport default function AddDependantsPage({ setProperty }) {\r\n  const [showDeps, setShowDeps] = useState(false);\r\n\r\n  if (showDeps) {\r\n    return <AddDependants showDeps={setShowDeps} />;\r\n  }\r\n  return <AcceptDependants setProperty={setProperty} showDeps={setShowDeps} />;\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\r\nimport Icon from \"@chakra-ui/icon\";\r\n\r\nexport default function CheckInSuccess({ userStore }) {\r\n  const navigate = useNavigate();\r\n\r\n  const checkOut = () => {\r\n    userStore.setProperty(\"scanned\", false);\r\n    userStore.setProperty(\"checkedIn\", false);\r\n  };\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"foodBG\">\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <Icon as={RiCheckboxCircleFill} color=\"#2FE562\" boxSize={36} />\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            Check In Successful!\r\n          </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"gray\" onClick={() => navigate(\"/civ/home\")}>\r\n              Home\r\n            </Button>\r\n            <Button variant=\"red\" onClick={() => checkOut()}>\r\n              Check Out\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import { UserStore } from \"../stores/UserStore\";\r\nimport { useEffect } from \"react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction ToastStatusMessageWrapper({...props}) {\r\n    const userStore = UserStore;\r\n    const toast = useToast();\r\n  \r\n    const returnSuccessToast = () => {\r\n      toast({\r\n        title: \"Success\",\r\n        description: userStore.successMSG,\r\n        status: \"success\",\r\n  \r\n        duration: 7000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n    \r\n    const returnWarningToast = () => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: userStore.errorMSG,\r\n        status: \"error\",\r\n  \r\n        duration: 7000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n\r\n    useEffect(() => {    \r\n      if(userStore.successMSG){\r\n        if(userStore.successMSG.length > 0){\r\n          returnSuccessToast();\r\n          userStore.setProperty('successMSG', \"\");\r\n        }\r\n      }\r\n    }, [userStore.successMSG]);\r\n\r\n    useEffect(() => {\r\n      if(userStore.errorMSG){\r\n        if(userStore.errorMSG.length > 0) {\r\n          returnWarningToast();\r\n          userStore.setProperty('errorMSG', \"\");\r\n        } \r\n      }\r\n    }, [userStore.errorMSG]);\r\n\r\n    return(\r\n        <>\r\n            {props.children}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(ToastStatusMessageWrapper);\r\n","import { Select, Center, Text, Stack, VStack, Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport QRScan from \"./QRScan\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useNavigate } from \"react-router\";\r\nimport AddDependantsPage from \"./AddDependantsPage\";\r\nimport CheckInSuccess from \"./CheckInSuccess\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nfunction CheckInPage({ back }) {\r\n  const userStore = UserStore;\r\n  const navigate = useNavigate();\r\n\r\n  if (!userStore.scanned) {\r\n    return (\r\n      <ToastStatusMessageWrapper>\r\n        <Box h=\"100vh\">\r\n          <Stack w=\"100%\" position=\"absolute\">\r\n            <Stack spacing={7} bg=\"gray.100\">\r\n              <Center>\r\n                <Text variant=\"heading\" mb={0}>\r\n                  Safe Check In\r\n                </Text>\r\n              </Center>\r\n              <div id=\"sourceSelectPanel\">\r\n                <Select\r\n                  w=\"90%\"\r\n                  maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n                  id=\"sourceSelect\"\r\n                  bg=\"white\"\r\n                  placeholder=\"Camera options\"\r\n                  mb={7}\r\n                  mx=\"auto\"\r\n                ></Select>\r\n              </div>\r\n            </Stack>\r\n            <Center>\r\n              <QRScan />\r\n            </Center>\r\n          </Stack>\r\n          <GrayContainer>\r\n            <VStack\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              spacing=\"5\"\r\n            >\r\n              <Button variant=\"gray\" id=\"back\" onClick={() => navigate(back)}>\r\n                Back\r\n              </Button>\r\n            </VStack>\r\n          </GrayContainer>\r\n        </Box>\r\n      </ToastStatusMessageWrapper>\r\n    );\r\n  }\r\n  if (!userStore.checkedIn) {\r\n    return <AddDependantsPage setProperty={userStore.setProperty} />;\r\n  }\r\n  return <CheckInSuccess userStore={userStore} />;\r\n}\r\n\r\nexport default observer(CheckInPage);\r\n","import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { geoCentroid } from \"d3-geo\";\r\n\r\nimport geoUrl from \"../../../assets/POA_2016_AUST.json\";\r\n//import { GiConsoleController } from \"react-icons/gi\";\r\nimport geoSuburbsUrl from \"../../../assets/TR_2016_AUST.json\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\n\r\nconst MapChart = ({ activeCases, setTooltipContent, height }) => {\r\n  const colorScale = scaleLinear().domain([1, 5]).range([\"#F0604C\", \"#850101\"]);\r\n\r\n  return (\r\n    <Box shadow=\"base\">\r\n      <ComposableMap\r\n        data-tip=\"\"\r\n        projectionConfig={{\r\n          scale: 550,\r\n          rotate: [-135, 16, 0],\r\n        }}\r\n        height={height}\r\n      >\r\n        <ZoomableGroup center={[0, 0]} maxZoom={200}>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => {\r\n                const POST_CODE = parseInt(geo.properties.POA_CODE16);\r\n                return (\r\n                  <Geography\r\n                    key={POST_CODE}\r\n                    geography={geo}\r\n                    onMouseEnter={() => {\r\n                      setTooltipContent(\r\n                        `Postcode: ${POST_CODE} — ${\r\n                          activeCases[POST_CODE] != null\r\n                            ? activeCases[POST_CODE]\r\n                            : 0\r\n                        } Recent ${\r\n                          activeCases[POST_CODE] == null ||\r\n                          activeCases[POST_CODE] > 1\r\n                            ? \"Cases\"\r\n                            : \"Case\"\r\n                        }`\r\n                      );\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      setTooltipContent(\"\");\r\n                    }}\r\n                    style={{\r\n                      default: {\r\n                        fill:\r\n                          activeCases[POST_CODE] > 0\r\n                            ? colorScale(activeCases[POST_CODE])\r\n                            : \"#D6D6DA\",\r\n                        outline: \"none\",\r\n                        stroke: \"#000\",\r\n                        strokeWidth: \"0.005px\",\r\n                      },\r\n                      hover: {\r\n                        fill: \"#F53\",\r\n                        outline: \"none\",\r\n                      },\r\n                      pressed: {\r\n                        fill: \"#E42\",\r\n                        outline: \"none\",\r\n                      },\r\n                    }}\r\n                  />\r\n                );\r\n              })\r\n            }\r\n          </Geographies>\r\n\r\n        <Geographies geography={geoSuburbsUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => {\r\n              const centroid = geoCentroid(geo);\r\n              return (\r\n                <Marker coordinates={centroid}>\r\n                  <text\r\n                    style={{ pointerEvents: \"none\" }}\r\n                    y=\"2\"\r\n                    fontSize={1}\r\n                    textAnchor=\"middle\"\r\n                  >\r\n                    {geo.properties.TR_NAME16}\r\n                  </text>\r\n                </Marker>\r\n              );\r\n            })\r\n          }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n\r\n{\r\n  /* <Geographies geography={geoSuburbsUrl}>\r\n  {({ geographies }) =>\r\n    geographies.map(geo => {\r\n      console.log(geo.properties.SED_NAME16)\r\n      const centroid = geoCentroid(geo);\r\n      return (\r\n        <>\r\n          <Geography\r\n            key={geo.rsmKey}\r\n            geography={geo}\r\n            style={{\r\n              default: {\r\n                outline: \"none\",\r\n                fillOpacity: 0.0\r\n              },\r\n              hover: {\r\n                fillOpacity: 0.0,\r\n                outline: \"none\"\r\n              },\r\n              pressed: {\r\n                fillOpacity: 0.0,\r\n                outline: \"none\"\r\n              }\r\n            }}\r\n          />\r\n          <Marker coordinates={centroid}>\r\n            <text y=\"2\" fontSize={0.05} textAnchor=\"middle\">\r\n              {geo.properties.SED_NAME16}\r\n            </text>\r\n          </Marker>\r\n        </>\r\n      );\r\n    })\r\n  }\r\n  </Geographies> */\r\n}\r\n\r\n// {activeCases[POST_CODE] != null ?\r\n//   <Annotation\r\n//     subject={centroid}\r\n//     connectorProps={{\r\n//       stroke: \"#FF5533\",\r\n//       strokeWidth: 0.05,\r\n//       strokeLinecap: \"round\"\r\n//     }}\r\n//   >\r\n//     <text fontSize={1} x=\"1\" y=\"1\" textAnchor=\"end\" fill=\"#F53\" size={0.5}>\r\n//       {\"Paris\"}\r\n//     </text>\r\n//   </Annotation>\r\n//   :\r\n//   null\r\n// }\r\n\r\n{\r\n  /* <Annotation\r\n    subject={centroid}\r\n    dx={offsets[cur.id][0]}\r\n    dy={offsets[cur.id][1]}\r\n  >\r\n    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\r\n      {cur.id}\r\n    </text>\r\n  </Annotation> */\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Box, Text, Flex, VStack } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport MapChart from \"./HotSpotChart\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\n\r\nexport default function HotSpotsPage({ back }) {\r\n  const navigate = useNavigate();\r\n  const [content, setContent] = useState(\"\");\r\n  const userStore = UserStore;\r\n  const [groupedStats, setGroupedStats] = useState([]);\r\n  const mobile = window.innerWidth < 800;\r\n\r\n  // victoria data source\r\n  const VICSource = \"https://discover.data.vic.gov.au/dataset/all-victorian-sars-cov-2-cases-by-local-government-area-postcode-and-acquired-source/resource/890da9b3-0976-4de3-8028-e0c22b9a0e09\";\r\n  const NSWSource = \"https://data.nsw.gov.au/data/dataset/covid-19-cases-by-location/resource/21304414-1ff1-4243-a5d2-f52778048b29\";\r\n\r\n  // group active cases across NSW/VIC by post code\r\n  function groupStats() {\r\n    let covidCases = [];\r\n\r\n    // iterate over NSW covid-19 cases dataset\r\n    for(let i = 0; i < userStore.activeCasesStats.length; i++) {\r\n\r\n      if(covidCases[userStore.activeCasesStats[i].postcode] === undefined) { // if key does not yet exist, define it as an empty array\r\n        covidCases[userStore.activeCasesStats[i].postcode] = 0;\r\n      }\r\n      \r\n      // increment active cases for postcode \r\n      covidCases[userStore.activeCasesStats[i].postcode] += 1;\r\n    }\r\n\r\n    // iterate over VIC covid-19 cases dataset\r\n    for(let i = 0; i < userStore.vic_recent_confirmed_cases.length; i++) {\r\n\r\n      if(covidCases[userStore.vic_recent_confirmed_cases[i].Postcode] === undefined) { // if key does not yet exist, define it as an empty array\r\n        covidCases[userStore.vic_recent_confirmed_cases[i].Postcode] = 0;\r\n      }\r\n      \r\n      // increment active cases for postcode \r\n      covidCases[userStore.vic_recent_confirmed_cases[i].Postcode] += 1;\r\n    }\r\n\r\n    return covidCases;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setGroupedStats(groupStats());\r\n  }, []);\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"grayBG\">\r\n      <Box position=\"absolute\" h=\"100%\" w=\"100%\" top=\"40px\">\r\n        <VStack spacing={4} w=\"100%\">\r\n          <Text variant=\"heading\" as=\"h2\" m={0}>\r\n            Hotspot Map\r\n          </Text>\r\n          <Text pb={3}>Confirmed covid-19 transmissions, last 14 days.</Text>\r\n          // Render different map based on viewport size\r\n          <Box width=\"90vw\">\r\n            {mobile ? (\r\n              <>\r\n                <MapChart\r\n                  activeCases={groupedStats}\r\n                  setTooltipContent={setContent}\r\n                  height={800}\r\n                />\r\n                <ReactTooltip effect={\"float\"}>{content}</ReactTooltip>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MapChart\r\n                  activeCases={groupedStats}\r\n                  setTooltipContent={setContent}\r\n                  height={300}\r\n                />\r\n                <ReactTooltip effect={\"float\"}>{content}</ReactTooltip>\r\n              </>\r\n            )}\r\n          </Box>\r\n        </VStack>\r\n      </Box>\r\n\r\n      <GrayContainer>\r\n        <VStack w=\"90%\" maxW={{ base: \"90%\", md: \"container.sm\" }} spacing=\"5\">\r\n          <Text>Source: <a href={VICSource} target=\"_blank\">https://discover.data.vic.gov.au/</a> &nbsp;&nbsp;<a href={NSWSource} target=\"_blank\">https://data.nsw.gov.au/</a></Text>\r\n          <Button\r\n            variant=\"gray\"\r\n            maxW=\"lg\"\r\n            w=\"90%\"\r\n            onClick={() => navigate(back)}\r\n          >\r\n            BACK\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import Icon from \"@chakra-ui/icon\";\r\nimport { Box, HStack, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { BiAward } from \"react-icons/bi\";\r\n\r\nexport default function Certificate({ content }) {\r\n\r\n  return (\r\n    <Box\r\n      bg=\"white\"\r\n      py=\"4\"\r\n      px=\"4\"\r\n      borderRadius=\"xl\"\r\n      shadow=\"2xl\"\r\n      w=\"90%\"\r\n      minHeight=\"60px\"\r\n    >\r\n      <HStack>\r\n        <Icon as={BiAward} boxSize=\"12\" pr=\"2\" />\r\n        <VStack spacing={0} pt=\"2\">\r\n          <Text as=\"h2\" color=\"gray.800\" textAlign=\"start\" my=\"0\" w=\"100%\">\r\n            {content.vaccine_type}\r\n          </Text>\r\n          <Box>\r\n            <Text textAlign=\"start\" display=\"inline-block\">\r\n            </Text>\r\n            <Text\r\n              pl=\"1\"\r\n              textAlign=\"start\"\r\n              display=\"inline-block\"\r\n            >\r\n              {content.doses_received} of {content.recommended_doses} doses received.\r\n            </Text>\r\n          </Box>\r\n          <Box>\r\n            <Text textAlign=\"start\" display=\"inline-block\">\r\n              status:\r\n            </Text>\r\n            <Text\r\n              pl=\"1\"\r\n              textAlign=\"start\"\r\n              display=\"inline-block\"\r\n              color={content.doses_received === content.recommended_doses ? \"green.500\" : \"red.400\"}\r\n            >\r\n              {content.doses_received === content.recommended_doses ? \"Completed\" : \"Ongoing\"}\r\n            </Text>\r\n          </Box>\r\n        </VStack>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Flex, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Certificate from \"./Certificate\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction MyCertsPage() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  const noCertificates = () => {\r\n    return (\r\n      Object.keys(userStore.vaccination_certificate).length === 0 &&\r\n      userStore.vaccination_certificate.constructor === Object\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"grayBG\">\r\n      <Box position=\"absolute\" h=\"100%\" w=\"100%\" top=\"40px\">\r\n        <Flex justifyContent=\"center\" alignItems=\"flex-start\">\r\n          <VStack\r\n            spacing=\"3\"\r\n            w=\"90%\"\r\n            minH=\"80%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          >\r\n            <Text variant=\"heading\" textAlign=\"center\">\r\n              My Covid-19 Vaccination Certificate\r\n            </Text>\r\n            {noCertificates() ? (\r\n              <>No certificates</>\r\n            ) : (\r\n              <Certificate content={userStore.vaccination_certificate} />\r\n            )}\r\n          </VStack>\r\n        </Flex>\r\n      </Box>\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"90%\" maxW={{ base: \"90%\", md: \"container.sm\" }}>\r\n          <Button variant=\"gray\" onClick={() => navigate(\"/civ/home\")}>\r\n            Back\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default observer(MyCertsPage);\r\n","import React from \"react\";\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function VacCentres({ userStore }) {\r\n  return (\r\n    <Box overflow=\"auto\" h=\"40vh\" maxW=\"container.sm\">\r\n      <Table variant=\"striped\" bg=\"#8BF3B5\">\r\n        <TableCaption>\r\n          Source:{\" \"}\r\n          <a\r\n            href=\"https://data.gov.au/dataset/ds-vic-01bd667c-e44d-4b9e-91c2-d707dc1a5bd2/details?q=covid\"\r\n            target=\"_blank\"\r\n          >\r\n            https://data.gov.au\r\n          </a>\r\n        </TableCaption>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Location</Th>\r\n            <Th>Address</Th>\r\n            <Th>Wait Time</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {userStore.vic_vaccine_locations.map((location) => {\r\n            return (\r\n              <Tr key={location.shortNameClean}>\r\n                <Td>{location.shortNameClean}</Td>\r\n                <Td>{location.addressFull}</Td>\r\n                <Td>{location.waitPeriodDisp}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      </Table>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { List, ListItem, ListIcon } from \"@chakra-ui/react\";\r\nimport { MdCheckCircle } from \"react-icons/md\";\r\n\r\nexport default function RolloutInfo({ rolloutPanel }) {\r\n  if (rolloutPanel == 0) {\r\n    return (\r\n      <>\r\n        <p>You're eligible for Phase 1a if you're any of the following:</p>\r\n        <p>\r\n          <List spacing={3}>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Quarantine and border workers\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Frontline health care worker sub-groups for prioritisation\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Aged care and disability care staff\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Aged care and disability care residents\r\n            </ListItem>\r\n          </List>\r\n        </p>\r\n        <p>Planned rollout date: Currently Ongoing</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (rolloutPanel == 1) {\r\n    return (\r\n      <>\r\n        <p>You're eligible for Phase 1b if you're any of the following:</p>\r\n        <p>\r\n          <List spacing={3}>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Healthcare workers currently employed and not included in Phase 1a\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Household contacts of quarantine and border workers\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Critical and high risk workers who are currently employed\r\n              including defence, police, fire, emergency services and meat\r\n              processing\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Essential outbound travellers with a travel exemption\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Elderly people aged 70 years and over\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Aboriginal and Torres Strait Islander people aged 50 years and\r\n              over\r\n            </ListItem>\r\n          </List>\r\n        </p>\r\n        <p>Planned rollout date: Currently Ongoing</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (rolloutPanel == 2) {\r\n    return (\r\n      <>\r\n        <p>You're eligible for Phase 2a if you're any of the following:</p>\r\n        <p>\r\n          <List spacing={3}>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              People aged 50 years and over\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Aboriginal and Torres Strait Islander people aged 16-49 years\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              Other critical and high risk workers\r\n            </ListItem>\r\n          </List>\r\n        </p>\r\n        <p>Planned rollout date: 3 May 2021</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (rolloutPanel == 3) {\r\n    return (\r\n      <>\r\n        <p>You're eligible for Phase 2b if you're any of the following:</p>\r\n        <p>\r\n          <List spacing={3}>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              People aged 16-49 years\r\n            </ListItem>\r\n          </List>\r\n        </p>\r\n        <p>Planned rollout date: Unknown</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (rolloutPanel == 4) {\r\n    return (\r\n      <>\r\n        <p>You're eligible for Phase 3 if you're any of the following:</p>\r\n        <p>\r\n          <List spacing={3}>\r\n            <ListItem>\r\n              <ListIcon as={MdCheckCircle} color=\"green.500\" />\r\n              People aged less than 16 years if under\r\n            </ListItem>\r\n          </List>\r\n        </p>\r\n        <p>Planned rollout date: Unknown</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { AccordionButton } from \"@chakra-ui/accordion\";\r\nimport { Spacer, Text } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { MinusIcon, AddIcon } from \"@chakra-ui/icons\";\r\n\r\nexport default function AccordButton({ title, isExpanded }) {\r\n  return (\r\n    <AccordionButton\r\n      layerStyle=\"accordButton\"\r\n      _expanded={{ bg: \"#fefefe\" }}\r\n      _hover={{ opacity: 1 }}\r\n    >\r\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" my=\"3\">\r\n        {title}\r\n      </Text>\r\n      <Spacer />\r\n      {isExpanded ? <MinusIcon fontSize=\"12px\" /> : <AddIcon fontSize=\"12px\" />}\r\n    </AccordionButton>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Select, Box, Text, VStack, Link } from \"@chakra-ui/react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport VacCentres from \"../components/VacCentres\";\r\nimport RolloutInfo from \"../components/RolloutInfo\";\r\nimport { Accordion, AccordionItem, AccordionPanel } from \"@chakra-ui/react\";\r\nimport AccordButton from \"../components/AccordButton\";\r\n\r\nfunction RolloutsPage({ back }) {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n  const [rolloutPanel, setRolloutPanel] = useState(0);\r\n\r\n  useEffect(() => {\r\n    userStore.getVaccineLocations();\r\n  }, []);\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <GrayContainer>\r\n        <VStack spacing={4} w=\"100%\">\r\n          <Text variant=\"heading\" m={0}>\r\n            Rollout Info\r\n          </Text>\r\n\r\n          <Accordion defaultIndex={[0]} w=\"90%\" maxW=\"container.sm\" allowToggle>\r\n            <AccordionItem>\r\n              {({ isExpanded }) => (\r\n                <>\r\n                  <AccordButton\r\n                    title=\"Rollout Phases\"\r\n                    isExpanded={isExpanded}\r\n                  />\r\n                  <AccordionPanel mb={4} bg=\"#fafafa\" borderRadius=\"2xl\">\r\n                    <Box\r\n                      w=\"90%\"\r\n                      maxW=\"container.sm\"\r\n                      p=\"5\"\r\n                      overflow=\"auto\"\r\n                      h=\"36vh\"\r\n                      maxH=\"36vh\"\r\n                    >\r\n                      <Select\r\n                        bg=\"white\"\r\n                        shadow=\"base\"\r\n                        border=\"none\"\r\n                        mb=\"4\"\r\n                        placeholder=\"Select rollout phase\"\r\n                        onChange={(e) => setRolloutPanel(e.target.value)}\r\n                      >\r\n                        <option value=\"0\">Phase 1a</option>\r\n                        <option value=\"1\">Phase 1b</option>\r\n                        <option value=\"2\">Phase 2a</option>\r\n                        <option value=\"3\">Phase 2b</option>\r\n                        <option value=\"4\">Phase 3</option>\r\n                      </Select>\r\n                      <RolloutInfo rolloutPanel={rolloutPanel} />\r\n                      <Link\r\n                        href=\"https://covid-vaccine.healthdirect.gov.au/eligibility\"\r\n                        isExternal\r\n                      >\r\n                        <Text variant=\"link\">Find out if your eligible</Text>\r\n                      </Link>\r\n                    </Box>\r\n                  </AccordionPanel>\r\n                </>\r\n              )}\r\n            </AccordionItem>\r\n\r\n            <AccordionItem>\r\n              {({ isExpanded }) => (\r\n                <>\r\n                  <AccordButton\r\n                    title=\"Vaccination Centres\"\r\n                    isExpanded={isExpanded}\r\n                  />\r\n\r\n                  <AccordionPanel pb={4}>\r\n                    <VacCentres userStore={userStore} />\r\n                  </AccordionPanel>\r\n                </>\r\n              )}\r\n            </AccordionItem>\r\n          </Accordion>\r\n\r\n          <Button\r\n            variant=\"gray\"\r\n            maxW=\"lg\"\r\n            w=\"90%\"\r\n            onClick={() => navigate(back)}\r\n          >\r\n            BACK\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default observer(RolloutsPage);\r\n","import { Box, Spacer, Text } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\n\r\nexport default function StatItem({ title, value }) {\r\n  return (\r\n    <Box layerStyle=\"statItem\">\r\n      <Box d=\"flex\" px=\"3\">\r\n        <Text as=\"h3\">{title}</Text>\r\n        <Spacer />\r\n        <Text as=\"h3\">{value}</Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { UserStore } from \"../../../stores/UserStore\";\r\nimport { AccordionPanel, AccordionItem } from \"@chakra-ui/react\";\r\nimport AccordButton from \"../components/AccordButton\";\r\nimport StatItem from \"../components/StatItem\";\r\n\r\nexport default function TotalCasesStats() {\r\n  const userStore = UserStore;\r\n\r\n  const currentTotals = [\r\n    {\r\n      key: \"Total Cases\",\r\n      value: userStore.esri_current_totals[0].Total_Cases.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"NSW\",\r\n      value: userStore.esri_current_totals[0].NSW.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"VIC\",\r\n      value: userStore.esri_current_totals[0].VIC.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"ACT\",\r\n      value: userStore.esri_current_totals[0].ACT.toLocaleString(),\r\n    },\r\n    { key: \"NT\", \r\n      value: userStore.esri_current_totals[0].NT.toLocaleString() \r\n    },\r\n    {\r\n      key: \"QLD\",\r\n      value: userStore.esri_current_totals[0].QLD.toLocaleString(),\r\n    },\r\n    { key: \"SA\", value: userStore.esri_current_totals[0].SA.toLocaleString() },\r\n    {\r\n      key: \"TAS\",\r\n      value: userStore.esri_current_totals[0].TAS.toLocaleString(),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AccordionItem>\r\n      {({ isExpanded }) => (\r\n        <>\r\n          <AccordButton title=\"Total Cases\" isExpanded={isExpanded} />\r\n\r\n          <AccordionPanel>\r\n            {/* display total active cases across NSW, grouped by area */}\r\n            {currentTotals.map((total, i) => {\r\n              return (\r\n                <StatItem key={i} title={total[\"key\"]} value={total[\"value\"]} />\r\n              );\r\n            })}\r\n          </AccordionPanel>\r\n        </>\r\n      )}\r\n    </AccordionItem>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Box, Spacer, Text } from \"@chakra-ui/layout\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { AccordionPanel, AccordionItem } from \"@chakra-ui/react\";\r\nimport AccordButton from \"../components/AccordButton\";\r\nimport StatItem from \"../components/StatItem\";\r\n\r\n// show active cases (active being defined by new cases within the last 2 weeks)\r\nexport default function ActiveCasesStats() {\r\n  const userStore = UserStore;\r\n  const [groupedStats, setGroupedStats] = useState([]);\r\n\r\n  // group active cases across NSW by area\r\n  function groupStats() {\r\n    let temp = [];\r\n\r\n    for (let i = 0; i < userStore.activeCasesStats.length; i++) {\r\n      if (temp[userStore.activeCasesStats[i].lhd_2010_name] === undefined) {\r\n        // if key does not yet exist, define it as an empty array\r\n        temp[userStore.activeCasesStats[i].lhd_2010_name] = [];\r\n      }\r\n\r\n      temp[userStore.activeCasesStats[i].lhd_2010_name].push({\r\n        // push to array based on location, e.g. Sydney, Northern Sydney, Wollongong, etc.\r\n        notification_date: Date(\r\n          toString(userStore.activeCasesStats[i].notification_date) + \" UTC\"\r\n        ),\r\n        post_code: userStore.activeCasesStats[i].post_code,\r\n      });\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setGroupedStats(groupStats());\r\n  }, []);\r\n\r\n  return (\r\n    <AccordionItem>\r\n      {({ isExpanded }) => (\r\n        <>\r\n          <AccordButton title=\"Recent Cases\" isExpanded={isExpanded} />\r\n\r\n          <AccordionPanel>\r\n            {/* display total active cases across NSW */}\r\n            <StatItem title=\"NSW\" value={userStore.activeCasesStats.length} />\r\n\r\n            {/* display total active cases across NSW, grouped by area */}\r\n            {Object.keys(groupedStats).map((keyname, i) => {\r\n              return (\r\n                <StatItem\r\n                  key={i}\r\n                  title={keyname.length === 0 ? \"Unknown\" : keyname}\r\n                  value={groupedStats[keyname].length}\r\n                />\r\n              );\r\n            })}\r\n          </AccordionPanel>\r\n        </>\r\n      )}\r\n    </AccordionItem>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { AccordionPanel, AccordionItem } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport StatItem from \"../components/StatItem\";\r\nimport AccordButton from \"../components/AccordButton\";\r\n\r\n// show active cases (active being defined by new cases within the last 2 weeks)\r\nexport default function TotalImmunisedStats() {\r\n  const userStore = UserStore;\r\n\r\n  const data = userStore.total_vaccinations.map((vac) => {\r\n    return {\r\n      date: moment(vac.date).local().format(\"YYYY-MM-DD\"),\r\n      _id: vac._id,\r\n      total_vaccinations: vac.total_vaccinations,\r\n    };\r\n  });\r\n\r\n  // get the last element in the array (today),\r\n  // convert to locale string to give commas to the number\r\n  const totalVaccinations =\r\n    userStore\r\n      .total_vaccinations[userStore.total_vaccinations.length - 1]\r\n      .total_vaccinations.toLocaleString();\r\n\r\n  const vaccinationsToday = {\r\n    date: moment(\r\n      userStore\r\n        .ausData14Days[userStore.ausData14Days.length - 1]\r\n        .date\r\n    )\r\n      .local()\r\n      .format(\"YYYY-MM-DD\"),\r\n    new_vaccinations:\r\n      userStore\r\n        .ausData14Days[userStore.ausData14Days.length - 1]\r\n        .new_vaccinations.toLocaleString(),\r\n  };\r\n\r\n  console.log(vaccinationsToday);\r\n\r\n  // sum the total number of vaccinations over the past 14 days\r\n  function getRecentVaccinations() {\r\n    let temp = 0;\r\n    for (let i = 0; i < userStore.ausData14Days.length; i++) {\r\n      if (userStore.ausData14Days[i].new_vaccinations === undefined) {\r\n        // if the new_vaccinations column doesn't exist skip the iteration\r\n        continue;\r\n      }\r\n      temp += userStore.ausData14Days[i].new_vaccinations;\r\n    }\r\n    return temp.toLocaleString();\r\n  }\r\n\r\n  const recentVaccinations = getRecentVaccinations();\r\n\r\n  return (\r\n    <AccordionItem>\r\n      {({ isExpanded }) => (\r\n        <>\r\n          <AccordButton title=\"Vaccinations\" isExpanded={isExpanded} />\r\n\r\n          <AccordionPanel pb=\"20\">\r\n            <StatItem title=\"Total vaccinations\" value={totalVaccinations} />\r\n            <StatItem\r\n              title=\"Vaccinations today\"\r\n              value={vaccinationsToday.new_vaccinations}\r\n            />\r\n            <StatItem\r\n              title=\"Recent vaccinations (14 days)\"\r\n              value={recentVaccinations}\r\n            />\r\n          </AccordionPanel>\r\n        </>\r\n      )}\r\n    </AccordionItem>\r\n  );\r\n}\r\n\r\n{\r\n  /* <Box d=\"flex\" h=\"50vh\" w=\"60vw\">\r\n    <ResponsiveContainer>\r\n        <LineChart\r\n            data={data}\r\n            margin={{\r\n                top: 16,\r\n                right: 16,\r\n                bottom: 0,\r\n                left: 24\r\n                }}\r\n        >\r\n            <XAxis dataKey=\"name\" />\r\n            <Label\r\n                angle={270}\r\n                position=\"left\"\r\n                style={{ textAnchor: \"middle\" }}\r\n            >\r\n                Sales ($)\r\n            </Label>\r\n            <Tooltip />\r\n            <CartesianGrid stroke=\"#f5f5f5\" />\r\n            <Line type=\"monotone\" dataKey=\"total_vaccinations\" stroke=\"#ff7300\" yAxisId={0} dot={false} />\r\n            <Line type=\"monotone\" dataKey=\"date\" stroke=\"#387908\" yAxisId={1} dot={false} />\r\n        </LineChart>\r\n    </ResponsiveContainer>\r\n</Box> */\r\n}\r\n","import { UserStore } from \"../../../stores/UserStore\";\r\nimport { AccordionPanel, AccordionItem } from \"@chakra-ui/react\";\r\nimport AccordButton from \"../components/AccordButton\";\r\nimport StatItem from \"../components/StatItem\";\r\n\r\nexport default function TotalDeathsStats() {\r\n  const userStore = UserStore;\r\n\r\n  const currentDeaths = [\r\n    {\r\n      key: \"Total Deaths\",\r\n      value: userStore.esri_current_totals[0].Total_Deaths.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"NSW\",\r\n      value: userStore.esri_current_totals[0].NSW_Deaths.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"VIC\",\r\n      value: userStore.esri_current_totals[0].VIC_Deaths.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"ACT\",\r\n      value: userStore.esri_current_totals[0].ACT_Deaths.toLocaleString(),\r\n    },\r\n    { key: \"NT\", value: 0 },\r\n    {\r\n      key: \"QLD\",\r\n      value: userStore.esri_current_totals[0].QLD_Deaths.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"SA\",\r\n      value: userStore.esri_current_totals[0].SA_Deaths.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"TAS\",\r\n      value: userStore.esri_current_totals[0].TAS_Deaths.toLocaleString(),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AccordionItem>\r\n      {({ isExpanded }) => (\r\n        <>\r\n          <AccordButton title=\"Total Deaths\" isExpanded={isExpanded} />\r\n\r\n          <AccordionPanel>\r\n            {/* display total active cases across NSW, grouped by area */}\r\n            {currentDeaths.map((total, i) => {\r\n              return (\r\n                <StatItem key={i} title={total[\"key\"]} value={total[\"value\"]} />\r\n              );\r\n            })}\r\n          </AccordionPanel>\r\n        </>\r\n      )}\r\n    </AccordionItem>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { AccordionPanel, AccordionItem } from \"@chakra-ui/react\";\r\nimport AccordButton from \"../components/AccordButton\";\r\nimport StatItem from \"../components/StatItem\";\r\n\r\n// show active cases (active being defined by new cases within the last 2 weeks)\r\nexport default function TotalImmunisedStats() {\r\n  const userStore = UserStore;\r\n\r\n  const currentVaccinations = [\r\n    {\r\n      key: \"Total\",\r\n      value: (\r\n        userStore.esri_current_totals[0].NSW_Tests +\r\n        userStore.esri_current_totals[0].VIC_Tests +\r\n        userStore.esri_current_totals[0].ACT_Tests +\r\n        userStore.esri_current_totals[0].NT_Tests +\r\n        userStore.esri_current_totals[0].QLD_Tests +\r\n        userStore.esri_current_totals[0].SA_Tests +\r\n        userStore.esri_current_totals[0].TAS_Tests\r\n      ).toLocaleString(),\r\n    },\r\n    {\r\n      key: \"NSW\",\r\n      value: userStore.esri_current_totals[0].NSW_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"VIC\",\r\n      value: userStore.esri_current_totals[0].VIC_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"ACT\",\r\n      value: userStore.esri_current_totals[0].ACT_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"NT\",\r\n      value: userStore.esri_current_totals[0].NT_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"QLD\",\r\n      value: userStore.esri_current_totals[0].QLD_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"SA\",\r\n      value: userStore.esri_current_totals[0].SA_Tests.toLocaleString(),\r\n    },\r\n    {\r\n      key: \"TAS\",\r\n      value: userStore.esri_current_totals[0].TAS_Tests.toLocaleString(),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AccordionItem>\r\n      {({ isExpanded }) => (\r\n        <>\r\n          <AccordButton title=\"Tests Performed\" isExpanded={isExpanded} />\r\n\r\n          <AccordionPanel>\r\n            {/* display total active cases across NSW, grouped by area */}\r\n            {currentVaccinations.map((total, i) => {\r\n              return (\r\n                <StatItem key={i} title={total[\"key\"]} value={total[\"value\"]} />\r\n              );\r\n            })}\r\n          </AccordionPanel>\r\n        </>\r\n      )}\r\n    </AccordionItem>\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Flex, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { Accordion } from \"@chakra-ui/react\";\r\nimport TotalCasesStats from \"./TotalCasesStats\";\r\nimport ActiveCasesStats from \"./ActiveCasesStats\";\r\nimport TotalImmunisedStats from \"./TotalImmunisedStats\";\r\nimport TotalDeathsStats from \"./TotalDeathsStats\";\r\nimport TotalTestsStats from \"./TotalTestsStats\";\r\n\r\nexport default function StatsPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const esriData = \"https://covid19-esriau.hub.arcgis.com/datasets/b2505177db7f4f1f9a7d62e1bba6b53b_0/explore\";\r\n  const NSWSource = \"https://data.nsw.gov.au/data/dataset/covid-19-cases-by-location/resource/21304414-1ff1-4243-a5d2-f52778048b29\";\r\n  \r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"grayBG\">\r\n      <Box position=\"absolute\" h=\"100%\" w=\"100%\" top=\"40px\">\r\n        <Flex justifyContent=\"center\" direction=\"column\" alignItems=\"center\">\r\n          <Text variant=\"heading\" mb=\"3\">\r\n            Statistics\r\n          </Text>\r\n          <Box\r\n            overflowY=\"scroll\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            w=\"100%\"\r\n            h=\"70vh\"\r\n            p=\"5\"\r\n            borderRadius=\"3xl\"\r\n          >\r\n            <VStack spacing=\"3\" w=\"100%\">\r\n              {/* statistics accordion */}\r\n              <Accordion defaultIndex={null} w=\"100%\" allowToggle>\r\n                {/* total cases accordion item */}\r\n                <TotalCasesStats />\r\n\r\n                {/* active (last 14 days) cases accordion item */}\r\n                <ActiveCasesStats />\r\n\r\n                {/* total number of covid-19 tests performed */}\r\n                <TotalTestsStats />\r\n\r\n                {/* total deaths accordion item */}\r\n                <TotalDeathsStats />\r\n\r\n                {/* vaccination accordion item */}\r\n                <TotalImmunisedStats />\r\n              </Accordion>\r\n            </VStack>\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n      <GrayContainer>\r\n        <VStack spacing=\"2\" w=\"90%\" maxW={{ base: \"90%\", md: \"container.sm\" }}>\r\n          <Button variant=\"gray\" onClick={() => navigate(\"/civ/home\")}>\r\n            Back\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  VStack,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  Input,\r\n  InputGroup,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { civMenuRoutes } from \"../../civilian/components/civRoutes\";\r\nimport LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport DotPattern from \"../../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nconst FindUserPage = () => {\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const userStore = UserStore;\r\n  const navigate = useNavigate();\r\n\r\n  const handleFindUser = () => {\r\n    userStore.healthCareSearchUser(userEmail);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(userStore.operationWasSuccessful) {\r\n      userStore.setProperty('operationWasSuccessful', false);\r\n      navigate(\"/hea/healthtools\");\r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Box h=\"100vh\" w=\"100%\" layerStyle=\"mainBG\">\r\n        <Box position=\"absolute\" top=\"5\" left=\"5\">\r\n          <LogoMenu menuItems={civMenuRoutes} />\r\n        </Box>\r\n        <DotPattern />\r\n        <Flex\r\n          h=\"60%\"\r\n          align=\"center\"\r\n          w=\"100%\"\r\n          justify=\"center\"\r\n          position=\"absolute\"\r\n        >\r\n          <Box\r\n            bg=\"white\"\r\n            w=\"80%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            rounded=\"lg\"\r\n            p=\"3\"\r\n            boxShadow=\"lg\"\r\n          >\r\n            <InputGroup>\r\n              <Input\r\n                name=\"userEmail\"\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n                placeholder=\"User Email\"\r\n                value={userEmail}\r\n                onChange={(e) => setUserEmail(e.target.value)}\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n        </Flex>\r\n\r\n        <GrayContainer>\r\n          <VStack spacing=\"7\" w=\"100%\">\r\n            <Text variant=\"heading\" as=\"h2\" m={0}>\r\n              Find User\r\n            </Text>\r\n            <VStack\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              spacing=\"5\"\r\n            >\r\n              <Button variant=\"gray\" onClick={() => navigate(\"/civ/home\")}>\r\n                BACK\r\n              </Button>\r\n              <Button variant=\"green\" onClick={() => handleFindUser()}>\r\n                Search\r\n              </Button>\r\n            </VStack>\r\n          </VStack>\r\n        </GrayContainer>\r\n      </Box>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n};\r\n\r\nexport default observer(FindUserPage);\r\n","import { Flex, Stack, VStack, Text, Spacer, Button } from \"@chakra-ui/react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst HealthTools = () => {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  return (\r\n    <Flex h=\"100vh\" layerStyle=\"function\">\r\n      <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n        <Text as=\"h1\" mt={10} mx=\"auto\">\r\n          Health Tools\r\n        </Text>\r\n        <Stack bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\">\r\n          <Text as=\"h2\" m={0}>\r\n            {userStore.foundUser.first_name} {userStore.foundUser.last_name}\r\n          </Text>\r\n          <Flex>\r\n            <Text>User Email: </Text>\r\n            <Spacer />\r\n            <Text>{userStore.foundUser.email}</Text>\r\n          </Flex>\r\n          <Stack spacing={4}>\r\n            <Button\r\n              variant=\"green\"\r\n              onClick={() => navigate(\"/hea/healthtools/addvaccination\")}\r\n            >\r\n              Add Vacination\r\n            </Button>\r\n            <Button\r\n              variant=\"orange\"\r\n              onClick={() => navigate(\"/hea/healthtools/updatevaccination\")}\r\n            >\r\n              Update Vacination\r\n            </Button>\r\n            <Button\r\n              variant=\"red\"\r\n              onClick={() => navigate(\"/hea/healthtools/addcase\")}\r\n            >\r\n              Confirm Positive Case\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n        <GrayContainer>\r\n          <VStack\r\n            spacing=\"7\"\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          >\r\n            <Button\r\n              variant=\"gray\"\r\n              onClick={() => navigate(\"/civ/home\")}\r\n              position=\"fixed\"\r\n              bottom={8}\r\n              maxW=\"lg\"\r\n              w=\"90%\"\r\n            >\r\n              BACK\r\n            </Button>\r\n          </VStack>\r\n        </GrayContainer>\r\n      </Stack>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default observer(HealthTools);\r\n","const viruses = \r\n    {\r\n      name: \"COVID-19\",\r\n      id: \"covid19\",\r\n      vaccines: [\r\n        { name: \"Pfizer-BioNTech\", id: \"pfizer\" },\r\n        { name: \"Moderna\", id: \"moderna\" },\r\n        { name: \"AstraZeneca\", id: \"astrazeneca\" },\r\n      ],\r\n    };\r\n\r\nexport default viruses;","import {\r\n  Flex,\r\n  Stack,\r\n  Text,\r\n  VStack,\r\n  InputGroup,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  HStack,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport viruses from \"../components/viruses\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nfunction UpdateVaccination() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  const [vaccine, setVaccine] = useState(viruses.vaccines[0].name);\r\n  const [certificateDate, setCertificateDate] = useState(Date.now());\r\n  const [receivedDoses, setReceivedDoses] = useState(1);\r\n  const [recommendedDoses, setRecommendedDoses] = useState(1);\r\n\r\n  // get found users vaccine status on component mount\r\n  useEffect(() => {\r\n    userStore.healthCareGetVaccineStatus();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (typeof userStore.foundUser.vaccine_status !== \"undefined\") {\r\n      // if vaccine status has been retrieved\r\n      setVaccine(userStore.foundUser.vaccine_status.vaccine_type);\r\n      setCertificateDate(userStore.foundUser.vaccine_status.date);\r\n      setReceivedDoses(userStore.foundUser.vaccine_status.doses_received);\r\n      setRecommendedDoses(userStore.foundUser.vaccine_status.recommended_doses);\r\n    }\r\n  }, [userStore.foundUser.vaccine_status]);\r\n\r\n  const handleAddVaccination = () => {\r\n    userStore.healthCareUpdateVaccinationStatus(\r\n      vaccine,\r\n      certificateDate,\r\n      recommendedDoses,\r\n      receivedDoses\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userStore.operationWasSuccessful) {\r\n      userStore.setProperty(\"operationWasSuccessful\", false);\r\n      navigate(\"/hea/healthtools\");\r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Flex h=\"100vh\" layerStyle=\"function\">\r\n        <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n          <Text as=\"h1\" mt={10} mx=\"auto\">\r\n            Update Vaccination\r\n          </Text>\r\n          <Stack bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\" spacing={4}>\r\n            <Text>Vaccine Name</Text>\r\n            <Select\r\n              name=\"vaccineName\"\r\n              variant=\"filled\"\r\n              bg=\"#efefef\"\r\n              id=\"vaccineName\"\r\n              value={vaccine}\r\n              onChange={(e) => setVaccine(e.target.value)}\r\n              required\r\n            >\r\n              {viruses.vaccines.map((el) => (\r\n                <option value={el.name} key={el.name}>\r\n                  {el.name}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            <Text>Vaccination Date</Text>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                name=\"date\"\r\n                type=\"date\"\r\n                value={certificateDate}\r\n                onChange={(e) => setCertificateDate(e.target.value)}\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n              />\r\n            </InputGroup>\r\n            <HStack>\r\n              <Box>\r\n                <Text>Current Dose</Text>\r\n                <InputGroup size=\"md\">\r\n                  <Input\r\n                    name=\"dosesReceived\"\r\n                    type=\"number\"\r\n                    min={1}\r\n                    value={receivedDoses}\r\n                    onChange={(e) => setReceivedDoses(e.target.value)}\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    required\r\n                  />\r\n                </InputGroup>\r\n              </Box>\r\n              <Box>\r\n                <Text>Total Doses</Text>\r\n                <InputGroup size=\"md\">\r\n                  <Input\r\n                    name=\"recommendedDoses\"\r\n                    type=\"number\"\r\n                    min={1}\r\n                    value={recommendedDoses}\r\n                    onChange={(e) => setRecommendedDoses(e.target.value)}\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    required\r\n                  />\r\n                </InputGroup>\r\n              </Box>\r\n            </HStack>\r\n\r\n            <Button\r\n              variant=\"orange\"\r\n              w=\"100%\"\r\n              onClick={() => handleAddVaccination()}\r\n            >\r\n              Update Vaccination\r\n            </Button>\r\n          </Stack>\r\n          <GrayContainer>\r\n            <VStack\r\n              spacing=\"7\"\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            >\r\n              <Button\r\n                variant=\"gray\"\r\n                onClick={() => navigate(\"/hea/healthtools\")}\r\n                position=\"fixed\"\r\n                bottom={8}\r\n                maxW=\"lg\"\r\n                w=\"90%\"\r\n              >\r\n                BACK\r\n              </Button>\r\n            </VStack>\r\n          </GrayContainer>\r\n        </Stack>\r\n      </Flex>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n}\r\n\r\nexport default observer(UpdateVaccination);\r\n","import {\r\n  Flex,\r\n  Stack,\r\n  Text,\r\n  Box,\r\n  VStack,\r\n  InputGroup,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  HStack,\r\n} from \"@chakra-ui/react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport viruses from \"../components/viruses\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nfunction AddVaccination() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  const [vaccine, setVaccine] = useState(viruses.vaccines[0].name);\r\n  const [certificateDate, setCertificateDate] = useState(Date.now());\r\n  const [receivedDoses, setReceivedDoses] = useState(1);\r\n  const [recommendedDoses, setRecommendedDoses] = useState(1);\r\n\r\n  // get found users vaccine status on component mount\r\n  useEffect(() => {\r\n    userStore.healthCareGetVaccineStatus();\r\n  }, []);\r\n\r\n  const handleAddVaccination = () => {\r\n    userStore.healthCareUpdateVaccinationStatus(\r\n      vaccine,\r\n      certificateDate,\r\n      recommendedDoses,\r\n      receivedDoses\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userStore.operationWasSuccessful) {\r\n      userStore.setProperty(\"operationWasSuccessful\", false);\r\n      navigate(\"/hea/healthtools\");\r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Flex h=\"100vh\" layerStyle=\"function\">\r\n        <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n          <Text as=\"h1\" mt={10} mb=\"0\" mx=\"auto\">\r\n            Add Vaccination\r\n          </Text>\r\n          <Stack bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\" spacing={4}>\r\n            <Text>Vaccine Name</Text>\r\n            <Select\r\n              name=\"vaccineName\"\r\n              variant=\"filled\"\r\n              bg=\"#efefef\"\r\n              id=\"vaccineName\"\r\n              value={vaccine}\r\n              onChange={(e) => setVaccine(e.target.value)}\r\n              required\r\n            >\r\n              {viruses.vaccines.map((el) => (\r\n                <option value={el.name} key={el.name}>\r\n                  {el.name}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            <Text>Vaccination Date</Text>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                name=\"date\"\r\n                type=\"date\"\r\n                value={certificateDate}\r\n                onChange={(e) => setCertificateDate(e.target.value)}\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n              />\r\n            </InputGroup>\r\n\r\n            <HStack>\r\n              <Box>\r\n                <Text>Current Dose</Text>\r\n                <InputGroup size=\"md\">\r\n                  <Input\r\n                    name=\"dosesReceived\"\r\n                    type=\"number\"\r\n                    placeholder={1}\r\n                    min={1}\r\n                    value={receivedDoses}\r\n                    onChange={(e) => setReceivedDoses(e.target.value)}\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    required\r\n                  />\r\n                </InputGroup>\r\n              </Box>\r\n              <Box>\r\n                <Text>Total Doses</Text>\r\n                <InputGroup size=\"md\">\r\n                  <Input\r\n                    name=\"recommendedDoses\"\r\n                    type=\"number\"\r\n                    placeholder={1}\r\n                    min={1}\r\n                    value={recommendedDoses}\r\n                    onChange={(e) => setRecommendedDoses(e.target.value)}\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    required\r\n                  />\r\n                </InputGroup>\r\n              </Box>\r\n            </HStack>\r\n\r\n            <Button\r\n              variant=\"green\"\r\n              w=\"100%\"\r\n              onClick={() => handleAddVaccination()}\r\n            >\r\n              Add Vaccination\r\n            </Button>\r\n          </Stack>\r\n          <GrayContainer>\r\n            <VStack\r\n              spacing=\"7\"\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            >\r\n              <Button\r\n                variant=\"gray\"\r\n                onClick={() => navigate(\"/hea/healthtools\")}\r\n                position=\"fixed\"\r\n                bottom={8}\r\n                maxW=\"lg\"\r\n                w=\"90%\"\r\n              >\r\n                BACK\r\n              </Button>\r\n            </VStack>\r\n          </GrayContainer>\r\n        </Stack>\r\n      </Flex>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n}\r\n\r\nexport default observer(AddVaccination);\r\n","import {\r\n  Flex,\r\n  Stack,\r\n  VStack,\r\n  Text,\r\n  InputGroup,\r\n  Input,\r\n  Button\r\n} from \"@chakra-ui/react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport React, { useEffect } from \"react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nfunction AddVaccination() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  const handleSubmitCase = () => {\r\n    userStore.confirmCovidCase();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userStore.operationWasSuccessful) {\r\n      userStore.setProperty(\"operationWasSuccessful\", false);\r\n      navigate(\"/hea/healthtools\");\r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Flex h=\"100vh\" layerStyle=\"function\">\r\n        <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n          <Text as=\"h1\" mt={10} mx=\"auto\">\r\n            Confirm Positive Case\r\n          </Text>\r\n          <Stack bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\" spacing={4}>\r\n            <Text as=\"h2\" mt={0}>\r\n              Confirm Positive Case of Covid-19\r\n            </Text>\r\n            <Text mt={0}>\r\n              {userStore.foundUser.first_name, userStore.foundUser.last_name}\r\n            </Text>\r\n            <Text mt={0}>\r\n              {userStore.foundUser.email}\r\n            </Text>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                name=\"date\"\r\n                type=\"date\"\r\n                placeholder={Date.now()}\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n                id=\"date\"\r\n              />\r\n            </InputGroup>\r\n            <Button\r\n              variant=\"red\"\r\n              w=\"100%\"\r\n              onClick={() => handleSubmitCase()}\r\n            >\r\n              Confirm Positive Case\r\n            </Button>\r\n          </Stack>\r\n          <GrayContainer>\r\n            <VStack\r\n              spacing=\"7\"\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            >\r\n              <Button\r\n                variant=\"gray\"\r\n                onClick={() => navigate(\"/hea/healthtools\")}\r\n                position=\"fixed\"\r\n                bottom={8}\r\n                maxW=\"lg\"\r\n                w=\"90%\"\r\n              >\r\n                BACK\r\n              </Button>\r\n            </VStack>\r\n          </GrayContainer>\r\n        </Stack>\r\n      </Flex>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n}\r\n\r\nexport default observer(AddVaccination);\r\n","// Civilian\r\nimport CivLandingPage from \"../CivLandingPage\";\r\nimport CivilianHome from \"../home/CivilianHome\";\r\nimport CheckInPage from \"../checkIn/CheckInPage\";\r\nimport HotSpotsPage from \"../hotSpot/HotSpotsPage\";\r\nimport MyCertsPage from \"../myCerts/MyCertsPage\";\r\nimport RolloutsPage from \"../rollout/RolloutsPage\";\r\nimport StatsPage from \"../stats/StatsPage\";\r\n\r\n// Health\r\nimport FindUserPage from \"../../healthcareProfessional/findUser/findUserPage\";\r\nimport Healthtools from \"../../healthcareProfessional/healthTools/healthTools\";\r\nimport UpdateVaccination from \"../../healthcareProfessional/healthTools/updateVaccination\";\r\nimport AddVaccination from \"../../healthcareProfessional/healthTools/addVaccination\";\r\nimport AddCase from \"../../healthcareProfessional/healthTools/addCase\";\r\n\r\nexport const civRoutes = [\r\n  {\r\n    path: \"/\",\r\n    element: <CivLandingPage />,\r\n  },\r\n  {\r\n    path: \"/civ/home\",\r\n    element: <CivilianHome />,\r\n  },\r\n  {\r\n    path: \"/civ/checkin\",\r\n    element: <CheckInPage back=\"/civ/home\" />,\r\n  },\r\n  {\r\n    path: \"/civ/certs\",\r\n    element: <MyCertsPage back=\"/civ/home\" />,\r\n  },\r\n  {\r\n    path: \"/civ/hotspot\",\r\n    element: <HotSpotsPage back=\"/civ/home\" />,\r\n  },\r\n  {\r\n    path: \"/civ/rollout\",\r\n    element: <RolloutsPage back=\"/civ/home\" />,\r\n  },\r\n  {\r\n    path: \"/civ/stats\",\r\n    element: <StatsPage back=\"/civ/home\" />,\r\n  },\r\n  {\r\n    path: \"/hea/finduser\",\r\n    element: <FindUserPage />,\r\n  },\r\n  {\r\n    path: \"/hea/healthtools\",\r\n    element: <Healthtools />,\r\n  },\r\n  {\r\n    path: \"/hea/healthtools/updatevaccination\",\r\n    element: <UpdateVaccination />,\r\n  },\r\n  {\r\n    path: \"/hea/healthtools/addvaccination\",\r\n    element: <AddVaccination />,\r\n  },\r\n  {\r\n    path: \"/hea/healthtools/addcase\",\r\n    element: <AddCase />,\r\n  },\r\n];\r\n\r\nexport const civMenuRoutes = [\r\n  {\r\n    title: \"Home\",\r\n    path: \"/civ/home\",\r\n  },\r\n  {\r\n    title: \"Check In\",\r\n    path: \"/civ/checkin\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { civRoutes } from \"../components/civRoutes\";\r\n\r\nexport default function CivilianRouting() {\r\n  return (\r\n    <Routes>\r\n      {civRoutes.map((route, x) => (\r\n        <Route key={x} path={route.path} element={route.element} />\r\n      ))}\r\n    </Routes>\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport LogoMenu from \"../../components/LogoMenu/LogoMenu\";\r\nimport { orgMenuRoutes } from \"./components/OrgRoutes\";\r\nimport GrayContainer from \"../../components/GrayContainer\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nexport default function HealthLandingPage() {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <DotPattern />\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <LogoMenu menuItems={orgMenuRoutes} />\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            Organization Account\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Track the spread. Lower the risk. Beat the plague.\r\n          </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"green\" onClick={() => navigate(\"/org/home\")}>Home</Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import { BsPersonPlus, BsPersonDash, BsPerson } from \"react-icons/bs\";\r\n\r\nexport const menuOptions = [\r\n  {\r\n    icon: BsPersonPlus,\r\n    title: \"Add Employee\",\r\n    desc: \"Easily add new employees to your organisation\",\r\n    route: \"/org/addemp\",\r\n  },\r\n  {\r\n    icon: BsPersonDash,\r\n    title: \"Remove Employee\",\r\n    desc: \"Remove previous employees from your organisation\",\r\n    route: \"/org/removeemp\",\r\n  },\r\n  {\r\n    icon: BsPerson,\r\n    title: \"Employee Stats\",\r\n    desc: \"View the overall statistics of your employees\",\r\n    route: \"/org/empstats\",\r\n  },\r\n];\r\n","import { Box, Center, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\nimport { orgMenuRoutes } from \"../components/OrgRoutes\";\r\nimport { menuOptions } from \"./menuOptions\";\r\nimport Option from \"../../../components/Option\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\n\r\nexport default function OrgHomePage() {\r\n  const { onOpen } = useDisclosure();\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <Box position=\"absolute\" top=\"5\" left=\"5\" zIndex=\"2\">\r\n        <LogoMenu menuItems={orgMenuRoutes} notification={handleNotificationClicked}/>\r\n      </Box>\r\n      <Box position=\"absolute\" w=\"100%\" h=\"100%\">\r\n        <Center h=\"100%\">\r\n          <VStack\r\n            spacing=\"3\"\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          >\r\n            {menuOptions.map((item) => (\r\n              <Option key={item.title} content={item} />\r\n            ))}\r\n          </VStack>\r\n        </Center>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  VStack,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  Input,\r\n  InputGroup,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { orgMenuRoutes } from \"../components/OrgRoutes\";\r\nimport LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport DotPattern from \"../../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from '../../../components/ToastStatusMessageWrapper';\r\n\r\nconst AddEmployeeManualPage = () => {\r\n  const [empEmail, setEmpEmail] = useState(\"\");\r\n  const userStore = UserStore;\r\n  const navigate = useNavigate();\r\n\r\n  const handleAddEmployee = () => {\r\n    userStore.addEmployee(empEmail);\r\n  };\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Box h=\"100vh\" w=\"100%\" layerStyle=\"mainBG\">\r\n        <Box position=\"absolute\" top=\"5\" left=\"5\">\r\n          <LogoMenu menuItems={orgMenuRoutes} />\r\n        </Box>\r\n        <DotPattern />\r\n        <Flex\r\n          h=\"60%\"\r\n          align=\"center\"\r\n          w=\"100%\"\r\n          justify=\"center\"\r\n          position=\"absolute\"\r\n          top=\"140px\"\r\n        >\r\n          <Box\r\n            bg=\"white\"\r\n            w=\"80%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            rounded=\"lg\"\r\n            p=\"3\"\r\n            boxShadow=\"lg\"\r\n          >\r\n            <InputGroup>\r\n              <Input\r\n                name=\"userId\"\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n                placeholder=\"User Email\"\r\n                value={empEmail}\r\n                onChange={(e) => setEmpEmail(e.target.value)}\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n        </Flex>\r\n\r\n        <GrayContainer>\r\n          <VStack spacing=\"7\" w=\"100%\">\r\n            <Text variant=\"heading\" as=\"h2\" m={0}>\r\n              Add Employee\r\n            </Text>\r\n            <VStack\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              spacing=\"5\"\r\n            >\r\n              <Button variant=\"gray\" onClick={() => navigate(\"/org/home\")}>\r\n                BACK\r\n              </Button>\r\n              <Button variant=\"green\" onClick={handleAddEmployee}>\r\n                ADD EMPLOYEE\r\n              </Button>\r\n            </VStack>\r\n          </VStack>\r\n        </GrayContainer>\r\n      </Box>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n};\r\n\r\nexport default observer(AddEmployeeManualPage);\r\n","import {\r\n    VStack,\r\n    Text,\r\n    Box,\r\n    Button,\r\n    Input,\r\n    InputGroup,\r\n    Flex,\r\n  } from \"@chakra-ui/react\";\r\n  import React, { useState } from \"react\";\r\n  import { orgMenuRoutes } from \"../components/OrgRoutes\";\r\n  import LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\n  import GrayContainer from \"../../../components/GrayContainer\";\r\n  import DotPattern from \"../../../components/DotPattern\";\r\n  import { useNavigate } from \"react-router-dom\";\r\n  import { UserStore } from \"../../../stores/UserStore\";\r\n  import { observer } from \"mobx-react\";\r\n  import ToastStatusMessageWrapper from '../../../components/ToastStatusMessageWrapper';\r\n  \r\n  const RemoveEmployeeManualPage = () => {\r\n    const [empEmail, setEmpEmail] = useState(\"\");\r\n    const userStore = UserStore;\r\n    const navigate = useNavigate();\r\n  \r\n    const handleRemoveEmployee = () => {\r\n      userStore.removeEmployee(empEmail);\r\n    };\r\n  \r\n    return (\r\n      <ToastStatusMessageWrapper>\r\n        <Box h=\"100vh\" w=\"100%\" layerStyle=\"mainBG\">\r\n          <Box position=\"absolute\" top=\"5\" left=\"5\">\r\n            <LogoMenu menuItems={orgMenuRoutes} />\r\n          </Box>\r\n          <DotPattern />\r\n          <Flex\r\n            h=\"60%\"\r\n            align=\"center\"\r\n            w=\"100%\"\r\n            justify=\"center\"\r\n            position=\"absolute\"\r\n            top=\"140px\"\r\n          >\r\n            <Box\r\n              bg=\"white\"\r\n              w=\"80%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              rounded=\"lg\"\r\n              p=\"3\"\r\n              boxShadow=\"lg\"\r\n            >\r\n              <InputGroup>\r\n                <Input\r\n                  name=\"userId\"\r\n                  variant=\"filled\"\r\n                  bg=\"#efefef\"\r\n                  placeholder=\"User Email\"\r\n                  value={empEmail}\r\n                  onChange={(e) => setEmpEmail(e.target.value)}\r\n                />\r\n              </InputGroup>\r\n            </Box>\r\n          </Flex>\r\n  \r\n          <GrayContainer>\r\n            <VStack spacing=\"7\" w=\"100%\">\r\n              <Text variant=\"heading\" as=\"h2\" m={0}>\r\n                Remove Employee\r\n              </Text>\r\n              <VStack\r\n                w=\"90%\"\r\n                maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n                spacing=\"5\"\r\n              >\r\n                <Button variant=\"gray\" onClick={() => navigate(\"/org/home\")}>\r\n                  BACK\r\n                </Button>\r\n                <Button variant=\"green\" onClick={handleRemoveEmployee}>\r\n                  REMOVE EMPLOYEE\r\n                </Button>\r\n              </VStack>\r\n            </VStack>\r\n          </GrayContainer>\r\n        </Box>\r\n      </ToastStatusMessageWrapper>\r\n    );\r\n  };\r\n  \r\n  export default observer(RemoveEmployeeManualPage);\r\n  ","import React from \"react\";\r\nimport { Button, Input, Portal, Center, Text } from \"@chakra-ui/react\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction UpdateTotalEmpsMenu() {\r\n  const userStore = UserStore;\r\n\r\n  const handleUpdateTotalEmps = (e) => {\r\n    e.preventDefault();\r\n    userStore.updateTotalEmps();\r\n  };\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Text variant=\"link\">Update Total Employees</Text>\r\n      </PopoverTrigger>\r\n      <Portal>\r\n        <PopoverContent\r\n          w=\"90%\"\r\n          shadow=\"lg\"\r\n          border=\"2px\"\r\n          borderColor=\"green.500\"\r\n        >\r\n          <PopoverArrow\r\n            borderTop=\"1px\"\r\n            borderLeft=\"1px\"\r\n            borderColor=\"green.500\"\r\n          />\r\n          <PopoverHeader>Total Current Employees</PopoverHeader>\r\n          <PopoverCloseButton bg=\"none\" border=\"none\" boxSize=\"8\" />\r\n          <PopoverBody w=\"220px\" pr=\"8\">\r\n            <form onSubmit={handleUpdateTotalEmps}>\r\n              <Center flexDirection=\"column\" p=\"3\">\r\n                <Input\r\n                  isRequired\r\n                  type=\"number\"\r\n                  w=\"160px\"\r\n                  name=\"totalEmps\"\r\n                  value={userStore.totalEmps}\r\n                  onChange={(e) =>\r\n                    userStore.setProperty(e.target.name, e.target.value)\r\n                  }\r\n                />\r\n                <Button w=\"196px\" variant=\"green\" mt=\"4\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Center>\r\n            </form>\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default observer(UpdateTotalEmpsMenu);\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Flex, Spacer, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React, { useEffect } from \"react\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport Icon from \"@chakra-ui/icon\";\r\nimport { HiUserGroup } from \"react-icons/hi\";\r\nimport UpdateTotalEmpsMenu from \"./UpdateTotalEmpsMenu\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction StatsPage() {\r\n  const navigate = useNavigate();\r\n  const userStore = UserStore;\r\n\r\n  useEffect(() => {\r\n    userStore.orgEmployeeStats();\r\n  }, [])\r\n\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"grayBG\">\r\n      <Box position=\"absolute\" h=\"100%\" w=\"100%\" top=\"40px\">\r\n        <Flex justifyContent=\"center\" alignItems=\"flex-start\">\r\n          <VStack\r\n            spacing=\"3\"\r\n            w=\"90%\"\r\n            minH=\"80%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          >\r\n            <Text variant=\"heading\" mb=\"3\">\r\n              Statistics\r\n            </Text>\r\n            <Box d=\"flex\" w=\"90%\">\r\n              <Text as=\"h3\" my=\"0\" color=\"gray.500\">\r\n                Employee Stats\r\n              </Text>\r\n              <Spacer />\r\n              <Icon as={HiUserGroup} boxSize=\"6\" color=\"gray.500\" />\r\n            </Box>\r\n\r\n            <Box\r\n              px=\"3\"\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              bg=\"white\"\r\n              borderRadius=\"xl\"\r\n              shadow=\"base\"\r\n            >\r\n            </Box>\r\n\r\n            {userStore.orgStats.map((item) => (\r\n              <Box\r\n                key={item.key}\r\n                px=\"3\"\r\n                w=\"90%\"\r\n                maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n                bg=\"white\"\r\n                borderRadius=\"xl\"\r\n                shadow=\"base\"\r\n              >\r\n                <Box d=\"flex\" px=\"3\">\r\n                  <Text as=\"h3\" color=\"gray.800\">\r\n                    {item.key}\r\n                  </Text>\r\n                  <Spacer />\r\n                  <Text as=\"h3\">{item.value}</Text>\r\n                </Box>\r\n              </Box>\r\n            ))}\r\n\r\n          </VStack>\r\n        </Flex>\r\n      </Box>\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"90%\" maxW={{ base: \"90%\", md: \"container.sm\" }}>\r\n          <Button variant=\"gray\" onClick={() => navigate(\"/org/home\")}>\r\n            Back\r\n          </Button>\r\n        </VStack>\r\n      </GrayContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default observer(StatsPage);\r\n","import OrgLandingPage from \"../OrgLandingPage\";\r\nimport OrgHomePage from \"../home/OrgHomePage\";\r\n//import AddEmployeePage from \"../addEmp/AddEmployeePage\";\r\nimport AddEmployeeManualPage from \"../addEmp/AddEmployeeManualPage\";\r\nimport RemoveEmployeeManualPage from \"../addEmp/RemoveEmployeeManualPage\";\r\nimport StatsPage from \"../../organisation/stats/StatsPage\";\r\n\r\nexport const orgRoutes = [\r\n  {\r\n    path: \"/\",\r\n    element: <OrgLandingPage />,\r\n  },\r\n  {\r\n    path: \"/org/home\",\r\n    element: <OrgHomePage />,\r\n  },\r\n  {\r\n    path: \"/org/addemp\",\r\n    element: <AddEmployeeManualPage />,\r\n  },\r\n  {\r\n    path: \"/org/removeemp\",\r\n    element: <RemoveEmployeeManualPage />,\r\n  },\r\n  {\r\n    path: \"/org/empstats\",\r\n    element: <StatsPage />\r\n  },\r\n];\r\n\r\nexport const orgMenuRoutes = [\r\n  {\r\n    title: \"Add Employee\",\r\n    path: \"/org/addemp\",\r\n  },\r\n  {\r\n    title: \"Remove Employee\",\r\n    path: \"/org/removeemp\",\r\n  },\r\n  {\r\n    title: \"Employee Stats\",\r\n    path: \"/org/empstats\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { orgRoutes } from \"../components/OrgRoutes\";\r\n\r\nexport default function OrgRouting() {\r\n  return (\r\n    <Routes>\r\n      {orgRoutes.map((route) => (\r\n        <Route key={route.path} path={route.path} element={route.element} />\r\n      ))}\r\n    </Routes>\r\n  );\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, Text, VStack } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport LogoMenu from \"../../components/LogoMenu/LogoMenu\";\r\nimport { adMenuRoutes } from \"./components/adRoutes\";\r\nimport GrayContainer from \"../../components/GrayContainer\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router\";\r\nimport {\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function LandingPage() {\r\n  const navigate = useNavigate();\r\n  const { onOpen } = useDisclosure();\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n  return (\r\n    <Box h=\"100vh\" layerStyle=\"mainBG\">\r\n      <DotPattern />\r\n      <GrayContainer>\r\n        <VStack spacing=\"7\" w=\"100%\">\r\n          <LogoMenu menuItems={adMenuRoutes} notification={handleNotificationClicked} />\r\n          <Text variant=\"heading\" as=\"h2\">\r\n            Admin Account\r\n          </Text>\r\n          <Text align=\"center\" w=\"70%\">\r\n            Track the spread. Lower the risk. Beat the plague.\r\n          </Text>\r\n          <VStack\r\n            w=\"90%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            spacing=\"5\"\r\n          >\r\n            <Button variant=\"green\" onClick={() => navigate(\"/ad/org\")}>\r\n              ORganisations\r\n            </Button>\r\n          </VStack>\r\n        </VStack>\r\n      </GrayContainer>\r\n      \r\n    </Box>\r\n  );\r\n}\r\n","import { Flex, Text, Button, VStack } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AccountTab = ({ verifiedOrganisations, handleOrganisationVerification, setUpdateOrgList }) => {\r\n  const [organisation, setOrganisation] = useState([]);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const handleClick = (org) => {\r\n    setOrganisation(org);\r\n    onOpen();\r\n  };\r\n\r\n  const handleRevokeBtnClicked = () => {\r\n    handleOrganisationVerification(organisation.email, false); // revoke a verified organisations account and deactivate their account\r\n    onClose();\r\n    setUpdateOrgList(true);\r\n  }\r\n\r\n  return (\r\n    <VStack w=\"100%\" p=\"0\">\r\n      {verifiedOrganisations.map((el) => (\r\n        <Flex\r\n          key={el.email}\r\n          bg=\"white\"\r\n          align=\"center\"\r\n          w=\"80%\"\r\n          maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          rounded=\"lg\"\r\n          p=\"4\"\r\n          boxShadow=\"lg\"\r\n          cursor=\"pointer\"\r\n          onClick={() => handleClick(el)}\r\n        >\r\n          <VStack align=\"left\">\r\n            <Text as=\"h3\" m={0}>\r\n              {el.email}\r\n            </Text>\r\n            <Text m={0}>{el.organisation_name}</Text>\r\n          </VStack>\r\n        </Flex>\r\n      ))}\r\n      <Drawer onClose={onClose} isOpen={isOpen} size={\"lg\"}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader>{organisation.email}</DrawerHeader>\r\n          <DrawerBody>\r\n            <VStack spacing={4} align=\"left\">\r\n              <Text m={0}>{organisation.organisation_name}</Text>\r\n            </VStack>\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <VStack w=\"100%\" spacing={4}>\r\n              <Button variant=\"gray\" onClick={onClose}>\r\n                Back\r\n              </Button>\r\n              <Popover>\r\n                <PopoverTrigger>\r\n                  <Button variant=\"red\">Revoke Organisation</Button>\r\n                </PopoverTrigger>\r\n                <PopoverContent border={0}>\r\n                  <PopoverArrow />\r\n                  <PopoverHeader>Revoke privilege warning!</PopoverHeader>\r\n                  <PopoverCloseButton />\r\n                  <PopoverBody>\r\n                    <VStack spacing={4}>\r\n                      <Text m={0}>\r\n                        Are you sure you want to revoke this users organisation status?\r\n                      </Text>\r\n                      <Button variant=\"red\" onClick={handleRevokeBtnClicked}>Yes</Button>\r\n                    </VStack>\r\n                  </PopoverBody>\r\n                </PopoverContent>\r\n              </Popover>\r\n            </VStack>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default AccountTab;\r\n","import { Flex, Text, Button, VStack } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\n\r\nconst AccountTabPending = ({ pendingOrganisations, handleOrganisationVerification, setUpdateOrgList }) => {\r\n    const [organisation, setOrganisation] = useState(pendingOrganisations[0]);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const handleClick = (org) => {\r\n      setOrganisation(org);\r\n      onOpen();\r\n    };\r\n  \r\n    const handleVerifyBtnClicked = () => {\r\n      handleOrganisationVerification(organisation.email, true); // verify an organisation and activate the account\r\n      onClose();\r\n      setUpdateOrgList(true);\r\n    }\r\n  \r\n    return (\r\n    <VStack w=\"100%\" p=\"0\">\r\n      {pendingOrganisations.map((el) => (\r\n        <Flex\r\n          key={el.email}\r\n          bg=\"white\"\r\n          align=\"center\"\r\n          w=\"80%\"\r\n          maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n          rounded=\"lg\"\r\n          p=\"4\"\r\n          boxShadow=\"lg\"\r\n          cursor=\"pointer\"\r\n          onClick={() => handleClick(el)}\r\n        >\r\n          <VStack align=\"left\">\r\n            <Text as=\"h3\" m={0}>\r\n              {el.email}\r\n            </Text>\r\n            <Text m={0}>{el.organisation_name}</Text>\r\n          </VStack>\r\n        </Flex>\r\n      ))}\r\n      <Drawer onClose={onClose} isOpen={isOpen} size={\"lg\"}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader>{organisation.email}</DrawerHeader>\r\n          <DrawerBody>\r\n            <VStack spacing={4} align=\"left\">\r\n              <Text m={0}>{organisation.organisation_name}</Text>\r\n            </VStack>\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <VStack w=\"100%\" spacing={4}>\r\n              <Button variant=\"gray\" onClick={onClose}>\r\n                Back\r\n              </Button>\r\n              <Popover>\r\n                <PopoverTrigger>\r\n                  <Button variant=\"green\">verify organisation</Button>\r\n                </PopoverTrigger>\r\n                <PopoverContent border={0}>\r\n                  <PopoverArrow />\r\n                  <PopoverHeader>Warning!</PopoverHeader>\r\n                  <PopoverCloseButton />\r\n                  <PopoverBody>\r\n                    <VStack spacing={4}>\r\n                      <Text m={0}>\r\n                        Are you sure you want to verify this organization?\r\n                      </Text>\r\n                      <Button variant=\"green\" onClick={handleVerifyBtnClicked}>Yes</Button>\r\n                    </VStack>\r\n                  </PopoverBody>\r\n                </PopoverContent>\r\n              </Popover>\r\n            </VStack>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default AccountTabPending;\r\n","import { VStack, Text, Box, Button, InputGroup, Input } from \"@chakra-ui/react\";\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { adMenuRoutes } from \"../components/adRoutes\";\r\nimport AccountTab from \"../components/Tab\";\r\nimport AccountTabPending from \"../components/TabPending\";\r\nimport LogoMenu from \"../../../components/LogoMenu/LogoMenu\";\r\nimport GrayContainer from \"../../../components/GrayContainer\";\r\nimport DotPattern from \"../../../components/DotPattern\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserStore } from \"../../../stores/UserStore\";\r\nimport {\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { observer } from \"mobx-react\";\r\nimport ToastStatusMessageWrapper from \"../../../components/ToastStatusMessageWrapper\";\r\n\r\nconst Organisations = () => {\r\n  const userStore = UserStore;\r\n  const navigate = useNavigate();\r\n\r\n  const [updateOrgList, setUpdateOrgList] = useState(false);\r\n\r\n  const [verifiedOrganisations, setVerifiedOrganisations] = useState([]); // state to contain all verified organisations\r\n  const [searchVerifiedOrganisations, setSearchVerifiedOrganisations] = useState([]); // state to contain all verified organisations when a user is using the search function\r\n\r\n  const [unverifiedOrganisations, setUnverifiedOrganisations] = useState([]); // state to contain all unverified organisations\r\n  const [searchUnverifiedOrganisations, setSearchUnverifiedOrganisations] = useState([]); // state to contain all unverified organisations when a user is using the search function\r\n\r\n  const { onOpen } = useDisclosure();\r\n\r\n  const handleNotificationClicked = () => {\r\n    onOpen();\r\n  };\r\n\r\n  // load organisations from DB on component mount\r\n  useEffect(() => {\r\n    userStore.adminPopulateOrgList(setVerifiedOrganisations, setUnverifiedOrganisations);\r\n  }, []);\r\n\r\n  // load organisations from DB on status update\r\n  useEffect(() => {\r\n    if(updateOrgList) {\r\n      userStore.adminPopulateOrgList(setVerifiedOrganisations, setUnverifiedOrganisations);\r\n      setUpdateOrgList(false);\r\n    }\r\n  }, [updateOrgList]);\r\n\r\n  // if organisations retrieved successfully, set the search states for searching functionality\r\n  useEffect(() => {\r\n    if(userStore.operationWasSuccessful) {\r\n      setSearchVerifiedOrganisations(verifiedOrganisations);\r\n      setSearchUnverifiedOrganisations(unverifiedOrganisations);\r\n      userStore.setProperty(\"operationWasSuccessful\", false);\r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n  \r\n  const handleOrganisationVerification = userStore.updateOrganisationVerification; // function to update an organisations account status (verified = true || verified = false)\r\n\r\n  // function to enable searching of organisation accounts in list (caps sensitive)\r\n  const handleUserSearch = (e) => {\r\n    if (e.target.value === \"\") { // if there is nothing in the input/search bar the searchable states are === to the original states\r\n      setSearchVerifiedOrganisations(verifiedOrganisations); \r\n      setSearchUnverifiedOrganisations(unverifiedOrganisations);\r\n    } else { // else if the searchable states contain what's in the input.search bar update them\r\n      let results = verifiedOrganisations.filter((el) => el.email.includes(e.target.value));\r\n      setSearchVerifiedOrganisations(results);\r\n      results = unverifiedOrganisations.filter((el) => el.email.includes(e.target.value));\r\n      setSearchUnverifiedOrganisations(results);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Box h=\"100vh\" w=\"100%\" layerStyle=\"mainBG\" position=\"relative\" overflow=\"scroll\">\r\n        <Box position=\"fixed\" top=\"5\" left=\"5\" zIndex=\"1\">\r\n          <LogoMenu menuItems={adMenuRoutes} notification={handleNotificationClicked} />\r\n        </Box>\r\n        <DotPattern position=\"fixed\" />\r\n        <VStack\r\n          position=\"absolute\"\r\n          top=\"140px\"\r\n          left=\"0\"\r\n          right=\"0\"\r\n          justify=\"center\"\r\n          align=\"center\"\r\n        >\r\n          <Box\r\n            bg=\"white\"\r\n            w=\"80%\"\r\n            maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n            rounded=\"lg\"\r\n            p=\"4\"\r\n            boxShadow=\"lg\"\r\n          >\r\n            <Text variant=\"heading\" as=\"h2\" align=\"center\">\r\n              Organisations\r\n            </Text>\r\n            <InputGroup>\r\n              <Input\r\n                name=\"userId\"\r\n                variant=\"filled\"\r\n                bg=\"#efefef\"\r\n                placeholder=\"Organisation Email\"\r\n                onChange={(e) => handleUserSearch(e)}\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n          <Tabs\r\n            variant=\"soft-rounded\"\r\n            colorScheme=\"yellow\"\r\n            w=\"100%\"\r\n            align=\"center\"\r\n            defaultIndex={0}\r\n          >\r\n            <TabList>\r\n              <Tab cursor=\"pointer\" border={0} mr={3} p={3}>\r\n                Verified\r\n              </Tab>\r\n              <Tab cursor=\"pointer\" border={0}>\r\n                Pending\r\n              </Tab>\r\n            </TabList>\r\n            <Box\r\n              overflowY=\"scroll\"\r\n              maxW={{ base: \"90%\", md: \"container.md\" }}\r\n              w=\"100%\"\r\n              h=\"30vh\"\r\n              borderRadius=\"3xl\"\r\n              mt={5}\r\n            >\r\n            <TabPanels>\r\n              <TabPanel p={0} pb=\"180px\">\r\n                {searchVerifiedOrganisations.length <= 0 ? \r\n                  \"No verified organisations to show.\"\r\n                :\r\n                  <AccountTab\r\n                    verifiedOrganisations={searchVerifiedOrganisations}\r\n                    handleOrganisationVerification={handleOrganisationVerification}\r\n                    setUpdateOrgList={setUpdateOrgList}\r\n                  />\r\n                }\r\n              </TabPanel>\r\n              <TabPanel p={0} pb=\"180px\">\r\n                {searchUnverifiedOrganisations.length <= 0 ? \r\n                  \"No organisations awaiting verification.\"\r\n                :\r\n                  <AccountTabPending\r\n                    pendingOrganisations={searchUnverifiedOrganisations}\r\n                    handleOrganisationVerification={handleOrganisationVerification}\r\n                    setUpdateOrgList={setUpdateOrgList}\r\n                  />\r\n                }\r\n              </TabPanel>\r\n            </TabPanels>\r\n          </Box>\r\n        </Tabs>\r\n      </VStack>\r\n\r\n        <GrayContainer>\r\n          <VStack spacing=\"7\" w=\"100%\" position=\"fixed\">\r\n            <VStack\r\n              w=\"90%\"\r\n              maxW={{ base: \"90%\", md: \"container.sm\" }}\r\n              spacing=\"5\"\r\n            >\r\n              <Button variant=\"gray\" onClick={() => navigate(\"/\")}>\r\n                BACK\r\n              </Button>\r\n            </VStack>\r\n          </VStack>\r\n        </GrayContainer>\r\n      </Box>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n};\r\n\r\nexport default observer(Organisations);\r\n","// Civilian\r\nimport AdLandingPage from \"../AdLandingPage\";\r\nimport Organizations from \"../org/Organizations\";\r\n\r\nexport const adRoutes = [\r\n  {\r\n    path: \"/\",\r\n    element: <AdLandingPage />,\r\n  },\r\n  {\r\n    path: \"/ad/org\",\r\n    element: <Organizations />,\r\n  }\r\n];\r\n\r\nexport const adMenuRoutes = [\r\n  {\r\n    title: \"Organisations\",\r\n    path: \"/ad/org\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { adRoutes } from \"./adRoutes\";\r\n\r\nexport default function CivilianRouting() {\r\n  return (\r\n    <Routes>\r\n      {adRoutes.map((route, x) => (\r\n        <Route key={x} path={route.path} element={route.element} />\r\n      ))}\r\n    </Routes>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport BusRouting from \"./business/components/BusRouting\";\r\nimport CivilianRouting from \"./civilian/components/CivilianRouting\";\r\nimport OrgRouting from \"./organisation/components/OrgRouting\";\r\nimport AdRouting from \"./admin/components/AdRouting\";\r\nimport { UserStore } from \"../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction AppRouting() {\r\n  const userStore = UserStore;\r\n\r\n  if (\r\n    (userStore.roles[0] === \"ROLE_CIVILIAN\" ||\r\n      userStore.roles[0] === \"ROLE_HEALTHCARE\") &&\r\n    userStore.isLoggedIn === true\r\n  ) {\r\n    return <CivilianRouting />;\r\n  }\r\n  if (\r\n    userStore.roles[0] === \"ROLE_BUSINESS\" &&\r\n    userStore.isLoggedIn === true\r\n  ) {\r\n    return <BusRouting />;\r\n  }\r\n  if (\r\n    userStore.roles[0] === \"ROLE_ORGANISATION\" &&\r\n    userStore.isLoggedIn === true  \r\n  ) {\r\n    return <OrgRouting />;\r\n  }\r\n  if (\r\n    userStore.roles[0] === \"ROLE_ADMIN\" &&\r\n    userStore.isLoggedIn === true\r\n  ) {\r\n    return <AdRouting />;\r\n  }\r\n\r\n  // Plan type not found\r\n  userStore.doLogout();\r\n}\r\n\r\nexport default observer(AppRouting);\r\n","import React from 'react';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\r\nimport { Input, InputGroup } from \"@chakra-ui/react\";\r\n \r\nexport default function LocationSearchInput(props) {\r\n \r\n    const handleChange = (address) => {\r\n        props.setProperty(\"address\", address);\r\n    };\r\n \r\n    const handleSelect = (address) => {\r\n        props.setProperty(\"address\", address);\r\n        geocodeByAddress(address)\r\n        .then(results => { props.setProperty(\"place_id\", results[0].place_id); \r\n                            getLatLng(results[0])\r\n                            .then(latLng => props.setProperty(\"gps\", latLng))\r\n                            .catch(error => console.error('Error', error)); })\r\n        \r\n    };\r\n\r\n    return (\r\n        <PlacesAutocomplete\r\n            value={props.address}\r\n            onChange={handleChange}\r\n            onSelect={handleSelect}\r\n        >\r\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                <div>\r\n                    <InputGroup size=\"md\">\r\n                        <Input\r\n                            {...getInputProps({\r\n                                isRequired: true,\r\n                                name: \"address\",\r\n                                placeholder: 'Search your address...' ,\r\n                                variant: 'filled',\r\n                                bg: '#efefef' ,\r\n                                className: 'location-search-input',\r\n                            })} />\r\n                    </InputGroup>\r\n                    <div className=\"autocomplete-dropdown-container\">\r\n                    {loading && <div>Loading...</div>}\r\n                    {suggestions.map((suggestion, i) => {\r\n                        const className = suggestion.active\r\n                        ? 'suggestion-item--active'\r\n                        : 'suggestion-item';\r\n                        // inline style for demonstration purpose\r\n                        const style = suggestion.active\r\n                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                        return (\r\n                        <div key={i}\r\n                            {...getSuggestionItemProps(suggestion, {\r\n                            className,\r\n                            style,\r\n                            })}\r\n                        >\r\n                            <span>{suggestion.description}</span>\r\n                        </div>\r\n                        );\r\n                    })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </PlacesAutocomplete>\r\n    );\r\n}\r\n","import { Input } from \"@chakra-ui/react\";\r\nimport { UserStore } from \"../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n// wrapper for inputs used in forms or any sort of api/async request to disable while loading \r\nfunction InputWrapper({...props}) {\r\n    const userStore = UserStore;\r\n\r\n    return(\r\n        <Input\r\n            disabled={userStore.isLoading}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nexport default observer(InputWrapper);\r\n","import { Button } from \"@chakra-ui/react\";\r\nimport { UserStore } from \"../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n// wrapper for buttons used in forms or any sort of api/async request to disable while loading \r\nfunction ButtonWrapper({...props}) {\r\n    const userStore = UserStore;\r\n\r\n    return(\r\n        <Button\r\n            disabled={userStore.isLoading}\r\n            {...props}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport default observer(ButtonWrapper);\r\n","import { Center, Text, VStack } from \"@chakra-ui/layout\";\r\nimport { Select, Spacer, Stack, InputGroup } from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport LocationSearchInput from \"../../components/GoogleMapsAutoComplete\";\r\nimport InputWrapper from \"../../components/InputWrapper\";\r\nimport ButtonWrapper from \"../../components/ButtonWrapper\";\r\nimport ToastStatusMessageWrapper from \"../../components/ToastStatusMessageWrapper\";\r\n\r\nconst accTypes = [\r\n  { name: \"Civilian\", id: \"civilian\" },\r\n  { name: \"Business\", id: \"business\" },\r\n  { name: \"Organisation\", id: \"organisation\"},\r\n];\r\n\r\nconst SignUp = ({ userStore, setSignUp }) => {\r\n  const handleSignUp = (e) => {\r\n    e.preventDefault();\r\n    userStore.doSignUp();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(userStore.operationWasSuccessful) {\r\n      userStore.setProperty(\"operationWasSuccessful\", false);\r\n      setSignUp(false);\r\n      \r\n    }\r\n  }, [userStore.operationWasSuccessful]);\r\n\r\n  return (\r\n    <ToastStatusMessageWrapper>\r\n      <Center h=\"100vh\" layerStyle=\"mainBG\">\r\n        <DotPattern />\r\n\r\n        <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n          <Stack align=\"center\"></Stack>\r\n          <form onSubmit={handleSignUp}>\r\n            <Stack spacing={4} bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\">\r\n              <Text as=\"h2\" mt={0}>\r\n                Sign Up\r\n              </Text>\r\n              <Select\r\n                name=\"accType\"\r\n                variant=\"filled\"\r\n                onChange={(e) =>\r\n                  userStore.setProperty(e.target.name, e.target.value)\r\n                }\r\n                bg=\"#efefef\"\r\n                disabled={userStore.isLoading}\r\n              >\r\n                {accTypes.map((el) => (\r\n                  <option value={el.id} key={el.id}>\r\n                    {el.name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              <InputGroup size=\"md\">\r\n                <InputWrapper\r\n                  isRequired\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  value={userStore.email}\r\n                  onChange={(e) =>\r\n                    userStore.setProperty(e.target.name, e.target.value)\r\n                  }\r\n                  variant=\"filled\"\r\n                  bg=\"#efefef\"\r\n                />\r\n              </InputGroup>\r\n              <InputGroup size=\"md\">\r\n                <InputWrapper\r\n                  isRequired\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={userStore.password}\r\n                  placeholder=\"Password\"\r\n                  variant=\"filled\"\r\n                  bg=\"#efefef\"\r\n                  onChange={(e) =>\r\n                    userStore.setProperty(e.target.name, e.target.value)\r\n                  }\r\n                />\r\n              </InputGroup>\r\n\r\n              {/* Display required fields for signing up as a user */}\r\n              {userStore.accType === \"civilian\" && (\r\n                <>\r\n                  <InputGroup size=\"md\">\r\n                    <InputWrapper\r\n                      isRequired\r\n                      name=\"first_name\"\r\n                      value={userStore.first_name}\r\n                      placeholder=\"First Name\"\r\n                      variant=\"filled\"\r\n                      bg=\"#efefef\"\r\n                      onChange={(e) =>\r\n                        userStore.setProperty(e.target.name, e.target.value)\r\n                      }\r\n                    />\r\n                  </InputGroup>\r\n                  <InputGroup size=\"md\">\r\n                    <InputWrapper\r\n                      isRequired\r\n                      name=\"last_name\"\r\n                      value={userStore.last_name}\r\n                      placeholder=\"Last Name\"\r\n                      variant=\"filled\"\r\n                      bg=\"#efefef\"\r\n                      onChange={(e) =>\r\n                        userStore.setProperty(e.target.name, e.target.value)\r\n                      }\r\n                    />\r\n                  </InputGroup>\r\n                </>\r\n              )}\r\n\r\n              {/* Display required fields for signing up as a business */}\r\n              {userStore.accType === \"business\" && (\r\n                <>\r\n                  <InputGroup size=\"md\">\r\n                    <InputWrapper\r\n                      isRequired\r\n                      name=\"business_name\"\r\n                      value={userStore.business_name}\r\n                      placeholder=\"Business Name\"\r\n                      variant=\"filled\"\r\n                      bg=\"#efefef\"\r\n                      onChange={(e) =>\r\n                        userStore.setProperty(e.target.name, e.target.value)\r\n                      }\r\n                    />\r\n                  </InputGroup>\r\n                  <LocationSearchInput\r\n                    address={userStore.address}\r\n                    setProperty={userStore.setProperty}\r\n                  />\r\n                </>\r\n              )}\r\n\r\n              {/* Display required fields for signing up as a organisation */}\r\n            {userStore.accType === \"organisation\" && (\r\n              <>\r\n                <InputGroup size=\"md\">\r\n                  <InputWrapper\r\n                    isRequired\r\n                    name=\"organisation_name\"\r\n                    value={userStore.organisation_name}\r\n                    placeholder=\"Organisation Name\"\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    onChange={(e) =>\r\n                      userStore.setProperty(e.target.name, e.target.value)\r\n                    }\r\n                  />\r\n                </InputGroup>\r\n              </>\r\n            )}\r\n            \r\n\r\n              <VStack pt=\"3\">\r\n                <ButtonWrapper variant=\"green\" borderRadius=\"md\" type=\"submit\">\r\n                  Sign Up\r\n                </ButtonWrapper>\r\n                <Spacer />\r\n                <ButtonWrapper\r\n                  variant=\"gray\"\r\n                  type=\"button\"\r\n                  borderRadius=\"md\"\r\n                  onClick={() => setSignUp(false)}\r\n                >\r\n                  Back\r\n                </ButtonWrapper>\r\n              </VStack>\r\n            </Stack>\r\n          </form>\r\n        </Stack>\r\n      </Center>\r\n    </ToastStatusMessageWrapper>\r\n  );\r\n};\r\n\r\nexport default observer(SignUp);\r\n","import {\r\n  Center,\r\n  Text,\r\n  Spacer,\r\n  Stack,\r\n  InputGroup,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport SignUp from \"./SignUp\";\r\nimport LogoIcon from \"../../components/LogoMenu/LogoIcon\";\r\nimport { UserStore } from \"../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport DotPattern from \"../../components/DotPattern\";\r\nimport InputWrapper from \"../../components/InputWrapper\";\r\nimport ButtonWrapper from \"../../components/ButtonWrapper\";\r\nimport ToastStatusMessageWrapper from \"../../components/ToastStatusMessageWrapper\";\r\n\r\nfunction Login() {\r\n  const userStore = UserStore;\r\n  const [signUp, setSignUp] = useState(false);\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    userStore.doLogin();\r\n  };\r\n\r\n  if (!signUp) {\r\n    return (\r\n      <ToastStatusMessageWrapper>\r\n        <Center h=\"100vh\" layerStyle=\"mainBG\">\r\n          <DotPattern />\r\n          <Stack spacing=\"10\" mx=\"auto\" maxW=\"lg\" w=\"90%\">\r\n            <Stack align=\"center\">\r\n              <LogoIcon />\r\n              <Text variant=\"heading\" as=\"h2\" align=\"center\" pt=\"3\">\r\n                Trace Response\r\n              </Text>\r\n            </Stack>\r\n            <form onSubmit={handleLogin}>\r\n              <Stack spacing={4} bg=\"white\" rounded=\"lg\" p={8} boxShadow=\"lg\">\r\n                <Text as=\"h2\" mt={0}>\r\n                  Account Login\r\n                </Text>\r\n\r\n                <InputGroup size=\"md\">\r\n                  <InputWrapper\r\n                    isRequired\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    value={userStore.email}\r\n                    onChange={(e) =>\r\n                      userStore.setProperty(e.target.name, e.target.value)\r\n                    }\r\n                  />\r\n                </InputGroup>\r\n                <InputGroup size=\"md\">\r\n                  <InputWrapper\r\n                    isRequired\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    variant=\"filled\"\r\n                    bg=\"#efefef\"\r\n                    value={userStore.password}\r\n                    onChange={(e) =>\r\n                      userStore.setProperty(e.target.name, e.target.value)\r\n                    }\r\n                  />\r\n                </InputGroup>\r\n\r\n                <VStack pt=\"3\">\r\n                  <ButtonWrapper\r\n                    variant=\"gray\"\r\n                    type=\"button\"\r\n                    onClick={() => setSignUp(true)}\r\n                  >\r\n                    Sign Up\r\n                  </ButtonWrapper>\r\n                  <Spacer />\r\n                  <ButtonWrapper variant=\"green\" type=\"submit\">\r\n                    Login\r\n                  </ButtonWrapper>\r\n                </VStack>\r\n              </Stack>\r\n            </form>\r\n          </Stack>\r\n        </Center>\r\n      </ToastStatusMessageWrapper>\r\n    );\r\n  } else {\r\n    return <SignUp userStore={userStore} setSignUp={setSignUp} />;\r\n  }\r\n}\r\n\r\nexport default observer(Login);\r\n","import { BrowserRouter as Router } from \"react-router-dom\";\r\nimport AppRouting from \"./pages/AppRouting\";\r\nimport Login from \"./pages/login/Login\";\r\nimport { UserStore } from \"./stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst App = () => {\r\n  const userStore = UserStore;\r\n\r\n  if (!userStore.isLoggedIn) {\r\n    return <Login />;\r\n  } else {\r\n    return (\r\n      <Router>\r\n        <AppRouting />\r\n      </Router>\r\n    );\r\n  }\r\n};\r\n\r\nexport default observer(App);\r\n","const styles = {\r\n  global: {},\r\n};\r\n\r\nexport default styles;\r\n","const borders = {\r\n  // style object for base or default style\r\n  baseStyle: {},\r\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\r\n  sizes: {},\r\n  // styles for different visual variants (\"outline\", \"solid\")\r\n  variants: {},\r\n  // default values for `size` and `variant`\r\n  defaultProps: {\r\n    size: \"\",\r\n    variant: \"\",\r\n  },\r\n};\r\n\r\nexport default borders;\r\n","const Button = {\r\n  baseStyle: {\r\n    borderRadius: \"md\",\r\n    border: \"none\",\r\n    shadow: \"md\",\r\n    width: \"100%\",\r\n    py: \"26px\",\r\n    textTransform: \"uppercase\",\r\n    _hover: {\r\n      cursor: \"pointer\",\r\n      opacity: \".8\",\r\n    },\r\n  },\r\n  sizes: {},\r\n  variants: {\r\n    green: {\r\n      bg: \"#47cf6d\",\r\n      color: \"white\",\r\n    },\r\n    gray: {\r\n      bg: \"#dadada\",\r\n      color: \"gray.600\",\r\n    },\r\n    orange: {\r\n      bg: \"#ef8421\",\r\n      color: \"white\",\r\n    },\r\n    red: {\r\n      bg: \"#ea525b\",\r\n      color: \"white\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default Button;\r\n","const Text = {\r\n  baseStyle: {\r\n    fontFamily: \"Roboto\",\r\n    color: \"#636363\",\r\n  },\r\n  sizes: {},\r\n  variants: {\r\n    heading: {\r\n      fontFamily: \"Raleway\",\r\n      color: \"#171717\",\r\n      fontSize: { base: \"1.8rem\", md: \"3rem\" },\r\n      fontWeight: \"bold\",\r\n      my: \"6\",\r\n    },\r\n    link: {\r\n      color: \"green.400\",\r\n      _hover: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default Text;\r\n","export default __webpack_public_path__ + \"static/media/food.38c3b695.jpg\";","import foodImage from \"../../assets/food.jpg\";\r\n\r\nconst layerStyles = {\r\n  mainBG: {\r\n    bgGradient: \"linear(to-br, #8BF3B5, #2FE562)\",\r\n  },\r\n  grayBG: {\r\n    bg: \"#EFEFEF\",\r\n  },\r\n  function: {\r\n    bg: \"#efefef\",\r\n  },\r\n  foodBG: {\r\n    backgroundImage: `url(${foodImage})`,\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n  },\r\n  accordButton: {\r\n    bg: \"white\",\r\n    border: \"none\",\r\n    paddingTop: \"3\",\r\n    paddingBottom: \"3\",\r\n    marginBottom: \"3\",\r\n    borderRadius: \"xl\",\r\n    shadow: \"base\",\r\n  },\r\n  statItem: {\r\n    px: \"4\",\r\n    mx: \"4\",\r\n    marginBottom: \"2\",\r\n    bg: \"#fdfdfd\",\r\n    borderRadius: \"xl\",\r\n    color: \"gray.500\",\r\n  },\r\n};\r\n\r\nexport default layerStyles;\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\n// Global style overrides\r\nimport styles from \"./styles\";\r\n\r\n// Foundational style overrides\r\nimport borders from \"./foundations/borders\";\r\n\r\n// Component style overrides\r\nimport Button from \"./components/button\";\r\nimport Text from \"./typography/text\";\r\n\r\n// LayerStyles\r\nimport layerStyles from \"./layerStyles/layerStyles\";\r\n\r\nconst overrides = {\r\n  styles,\r\n  borders,\r\n  layerStyles: {\r\n    ...layerStyles,\r\n  },\r\n  components: {\r\n    Button,\r\n    Text,\r\n  },\r\n};\r\n\r\nexport default extendTheme(overrides);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { ThemeProvider } from \"@chakra-ui/react\";\r\nimport overrides from \"./theme/theme\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={overrides}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}